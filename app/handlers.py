from aiogram import F, Router, Bot
from aiogram.filters import CommandStart, Command
from aiogram.types import CallbackQuery
from sqlalchemy.future import select
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message
from datetime import datetime, timedelta
import pytz
from aiogram.types import (ReplyKeyboardMarkup, KeyboardButton,
                           InlineKeyboardMarkup, InlineKeyboardButton)
import logging

from sqlalchemy.orm.base import state_class_str

from app.database.models import ArtistPack, MailingSchedule, SpotPack
from app.database.flowfind_func import rt as flowfind_rt
import app.keyboards as kb
import app.database.requests as rq
from config import ADMIN_ID
from app.database.models import async_session, User

rt = Router()
rt.include_router(flowfind_rt)

def get_total_pages(total_items: int, items_per_page: int):
    return (total_items + items_per_page - 1) // items_per_page
def is_admin(user_id):
    return user_id in ADMIN_ID

class AdminAction(StatesGroup):
    waiting_for_user_username_subscription = State()
    waiting_for_subscription_days = State()
    waiting_for_user_username_check = State()
    waiting_for_message = State()
    waiting_for_user_username_check_packs = State()
    waiting_for_group_no_sub_message = State()
    waiting_for_group_end_sub_message = State()
    waiting_for_time_no_sub = State()
    waiting_for_time_end_sub = State()
    waiting_for_sub_message = State()
    waiting_for_who_free_message = State()
    waiting_for_who_no_free_message = State()
    waiting_for_who_paid_message = State()
    waiting_for_who_in_free_message = State()
    waiting_for_who_gold_mail = State()
    waiting_for_who_spot_mail = State()
    waiting_for_who_artists_mail = State()
    waiting_for_promo_name = State()
    waiting_for_duration = State()
    waiting_for_promo_info = State()
    waiting_for_max_uses = State()
    waiting_for_search_username = State()
class UserState(StatesGroup):
    enter_page_number_artists = State()
    enter_page_number_spot = State()
    waiting_for_promo_code = State()

@rt.message(CommandStart())
async def cmd_start(message: Message):
    await rq.set_user(message.from_user.id, message.from_user.username)
    await message.answer(f'<strong>FlowFind</strong> '
                        f'–≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø–æ–∏—Å–∫–µ –∞—Ä—Ç–∏—Å—Ç–æ–≤ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–∏ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ —É—Å–∏–ª–∏—è–º–∏.\n\n'
                        f'–° –Ω–∞–º–∏ –≤—ã —ç–∫–æ–Ω–æ–º–∏—Ç–µ –≤—Ä–µ–º—è –∏ –ø–æ–≤—ã—à–∞–µ—Ç–µ —Å–≤–æ—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å! üöÄ',
                        parse_mode="HTML",
                        reply_markup=kb.aftstart)


@rt.message(Command('apanel'))
async def apanel(message: Message):
    if is_admin(message.from_user.id):
        await message.answer('<strong>–í–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</strong>', reply_markup=kb.adm_start, parse_mode='HTML')


# –ø—Ä–æ–º–æ
@rt.callback_query(F.data == 'promo')
async def promo(callback: CallbackQuery, page: int = 1):
    async with async_session() as session:
        total_promos = await rq.get_promo_count(session)
        await callback.answer('üé´ –ü—Ä–æ–º–æ–∫–æ–¥—ã')
        if total_promos == 0:
            await callback.message.edit_text(
                "‚ùóÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="add_promo")],
                        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="adm_back")]
                    ]
                )
            )
            return

        total_pages = (total_promos + 4) // 5
        page = (page - 1) % total_pages + 1
        offset = (page - 1) * 5
        promo_codes = await rq.get_promo_codes(session, offset=offset)

        await callback.message.edit_text(
            "üìã –í–æ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:",
            reply_markup=get_promo_buttons(page, total_pages, promo_codes),
        )
async def promo_message(message: Message):
    async with async_session() as session:
        total_promos = await rq.get_promo_count(session)

        if total_promos == 0:
            await message.answer(
                "‚ùóÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="add_promo")],
                        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="adm_back")]
                    ]
                )
            )
            return

        total_pages = (total_promos + 4) // 5
        promo_codes = await rq.get_promo_codes(session, offset=0)

        await message.answer(
            "üìã –í–æ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:",
            reply_markup=get_promo_buttons(1, total_pages, promo_codes),
        )
def get_promo_buttons(page, total_pages, promo_codes, empty=False):
    buttons = []
    if not empty:
        for promo in promo_codes:
            buttons.append(
                [InlineKeyboardButton(text=promo.promo_name, callback_data=f"promo_info_{promo.promo_name}")])

    buttons.append([
        InlineKeyboardButton(text="‚ùÆ", callback_data=f"promo_page_{page - 1}"),
        InlineKeyboardButton(text=f"{page}/{total_pages}", callback_data="null"),
        InlineKeyboardButton(text="‚ùØ", callback_data=f"promo_page_{page + 1}")
    ])
    buttons.append([InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="add_promo"),
                    InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data="delete_promo")])
    buttons.append([InlineKeyboardButton(text="üîé –ù–∞–π—Ç–∏ –ø–æ —é–∑–µ—Ä—É", callback_data="search_promo_user")])
    buttons.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="adm_back")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

@rt.callback_query(F.data.startswith('promo_page_'))
async def promo_pagination(callback: CallbackQuery):
    page = int(callback.data.split('_')[-1])

    async with async_session() as session:
        total_promos = await rq.get_promo_count(session)

        if total_promos == 0:
            await callback.message.edit_text(
                "‚ùóÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="add_promo")],
                        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="adm_back")]
                    ]
                )
            )
            return

        total_pages = (total_promos + 4) // 5
        page = (page - 1) % total_pages + 1
        offset = (page - 1) * 5
        promo_codes = await rq.get_promo_codes(session, offset=offset)

        await callback.message.edit_text(
            "üìã –í–æ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:",
            reply_markup=get_promo_buttons(page, total_pages, promo_codes),
        )

@rt.callback_query(F.data.startswith('promo_info_'))
async def promo_info(callback: CallbackQuery):
    promo_name = callback.data.split('_')[2]
    async with async_session() as session:
        promo = await rq.get_promo_info(session, promo_name)
        if promo:
            user_list = []
            for user_id in promo.users_used:
                user = await rq.get_user(session, user_id)
                user_list.append(f"@{user.username}" if user.username else f"ID: {user_id}")

            users_used_text = '\n'.join(user_list) if user_list else "–ù–∏–∫—Ç–æ –µ—â–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª."

            text = (
                f"üéÅ <strong>–ü—Ä–æ–º–æ–∫–æ–¥:</strong> {promo.promo_name}\n"
                f"‚è≥ <strong>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:</strong> {promo.duration} –¥–Ω–µ–π\n"
                f"‚ÑπÔ∏è <strong>–í–∏–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞:</strong> {'–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –¥–Ω–∏' if promo.promo_type == 'freedays' else '–°–∫–∏–¥–∫–∞'}\n"
                f"üí∏ <strong>{'–ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –¥–Ω–µ–π:' if promo.promo_type == 'freedays' else '–°–∫–∏–¥–∫–∞'}</strong> {promo.promo_info_discount if promo.promo_info_discount else promo.promo_info_freedays}{'%' if promo.promo_info_discount else ''}\n"
                f"üéü <strong>–í–∏–¥ –ø–æ–¥–ø–∏—Å–∫–∏:</strong> {promo.subscription_type}\n"
                f"üë• <strong>–õ–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</strong> {len(promo.users_used)}/{promo.max_uses}\n"
                f"üìã <strong>–ö—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª:</strong>\n{users_used_text}\n"
            )
            await callback.message.edit_text(text, parse_mode='HTML', reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="promo")]]))
        else:
            await callback.answer("–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
@rt.callback_query(F.data == 'add_promo')
async def add_promo(callback: CallbackQuery, state: FSMContext):
    await callback.answer('‚ûï –î–æ–±–∞–≤–∏—Ç—å')
    await state.set_state(AdminAction.waiting_for_promo_name)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞:", reply_markup=kb.free_discount)
@rt.callback_query(F.data.startswith('promo_type_'))
async def promo_type_selected(callback: CallbackQuery, state: FSMContext):
    promo_type = callback.data.split('_')[2]
    await state.update_data(promo_type=promo_type)
    if promo_type == "freedays":
        await callback.answer('‚è≥ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –î–Ω–∏')
        await state.set_state(AdminAction.waiting_for_promo_info)
        await callback.message.edit_text("‚è≥ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –¥–Ω–µ–π:")
    elif promo_type == "discount":
        await callback.answer('üí∏ –°–∫–∏–¥–∫–∞')
        await state.set_state(AdminAction.waiting_for_promo_info)
        await callback.message.edit_text("üí∏ –í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ (–≤ %):")
@rt.message(F.text, AdminAction.waiting_for_promo_info)
async def promo_value_entered(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        promo_value = int(message.text.strip())
        promo_type = data.get("promo_type")
        await state.update_data(promo_value=promo_value)
        if promo_type == 'discount':
            await message.answer("üìö –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥:", reply_markup=kb.promo_basic_gold)
        else:
            await message.answer("üìö –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥:",
                                 reply_markup=kb.promo_basic_gold_without_basicgold)
    except ValueError:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")
@rt.callback_query(F.data.startswith('promo_sub1_'))
async def promo_sub_selected(callback: CallbackQuery, state: FSMContext):
    if "goldbasic" in callback.data:
        subscription_type = "basic+gold"
    elif "basic" in callback.data:
        subscription_type = "basic"
    else:
        subscription_type = "gold"
    await state.update_data(subscription_type=subscription_type)
    await state.set_state(AdminAction.waiting_for_promo_name)
    await callback.message.edit_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:")
@rt.message(F.text, AdminAction.waiting_for_promo_name)
async def promo_name_entered(message: Message, state: FSMContext):
    await state.update_data(promo_name=message.text.strip())
    data = await state.get_data()
    promo_type = data.get("promo_type")
    if promo_type == "discount":
        await state.set_state(AdminAction.waiting_for_duration)
        await message.answer("‚è≥ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞:")
    else:
        duration = 0
        await state.update_data(duration=duration)
        await state.set_state(AdminAction.waiting_for_max_uses)
        await message.answer("üë•Ô∏è –í–≤–µ–¥–∏—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ª—é–¥–µ–π –Ω–∞ –ø—Ä–æ–º–æ–∫–æ–¥:")
@rt.message(F.text, AdminAction.waiting_for_duration)
async def promo_duration_entered(message: Message, state: FSMContext):
    try:
        duration = int(message.text.strip())
        await state.update_data(duration=duration)
        await state.set_state(AdminAction.waiting_for_max_uses)
        await message.answer("üë•Ô∏è –í–≤–µ–¥–∏—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ª—é–¥–µ–π –Ω–∞ –ø—Ä–æ–º–æ–∫–æ–¥:")
    except ValueError:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –¥–Ω–µ–π!")
@rt.message(F.text, AdminAction.waiting_for_max_uses)
async def promo_max_uses_entered(message: Message, state: FSMContext):
    try:
        max_uses = int(message.text.strip())
        data = await state.get_data()

        promo_name = data.get("promo_name")
        duration = data.get("duration")
        promo_type = data.get("promo_type")
        promo_value = data.get("promo_value")
        subscription_type = data.get("subscription_type")

        async with async_session() as session:
            await rq.add_promo_code(session, promo_name, duration, promo_type, promo_value, subscription_type, max_uses)

        await message.answer(
            f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ <strong>{promo_name}</strong> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n"
            f"üéÅ –¢–∏–ø: {promo_type}\n"
            f"üìö –ü–æ–¥–ø–∏—Å–∫–∞: {subscription_type}\n"
            f"üë• –õ–∏–º–∏—Ç: {max_uses} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", parse_mode='HTML'
        )
        await state.clear()

        await promo_message(message)
    except ValueError:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –ª–∏–º–∏—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!")


@rt.callback_query(F.data == 'search_promo_user')
async def search_promo_user(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AdminAction.waiting_for_search_username)
    await callback.answer('üîé –ù–∞–π—Ç–∏ –ø–æ —é–∑–µ—Ä—É')
    await callback.message.edit_text("üîé –í–≤–µ–¥–∏—Ç–µ @—é–∑–µ—Ä–Ω–µ–π–º –∏–ª–∏ ID –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:", reply_markup=kb.adm_back)
@rt.message(F.text, AdminAction.waiting_for_search_username)
async def search_promo_result(message: Message, state: FSMContext):
    search_input = message.text.strip()
    async with async_session() as session:
        user = await rq.get_user_by_username_or_id(session, search_input)

        if not user:
            await message.answer("‚ùóÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            await state.clear()
            return

        promos_used = await rq.get_promos_by_user(session, user.user_id)

        if not promos_used:
            await message.answer(f"‚ùóÔ∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user.username or user.user_id} –Ω–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤.")
            await state.clear()
            return

        promo_list = []
        for promo in promos_used:
            promo_type = "‚è≥ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –¥–Ω–∏" if promo.promo_type == "freedays" else "üí∏ –°–∫–∏–¥–∫–∞"
            promo_value = f"{promo.promo_info_freedays} –¥–Ω–µ–π" if promo.promo_type == "freedays" else f"{promo.promo_info_discount}% —Å–∫–∏–¥–∫–∞"
            promo_list.append(
                f"üéÅ {'‚úÖ‚úÖ‚úÖ' if user.active_promo_code == promo.promo_name else '‚ùå‚ùå‚ùå'}<strong>{promo.promo_name}</strong>{'‚úÖ‚úÖ‚úÖ' if user.active_promo_code == promo.promo_name else '‚ùå‚ùå‚ùå'}\n"
                f"üîñ <strong>–¢–∏–ø:</strong> {promo_type}\n"
                f"üéÅ <strong>–†–∞–∑–º–µ—Ä:</strong> {promo_value}\n"
                f"üïì <strong>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:</strong> {promo.duration} –¥–Ω–µ–π\n"
                f"üìö <strong>–ü–æ–¥–ø–∏—Å–∫–∞:</strong> {promo.subscription_type}\n"
                f"üë• <strong>–õ–∏–º–∏—Ç:</strong> {len(promo.users_used)}/{promo.max_uses}\n"
                "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî"
            )

        promo_text = '\n\n'.join(promo_list)
        username_or_id = f"@{user.username}" if user.username else f"ID: {user.user_id}"

        await message.answer(
            f"üîé <strong>–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username_or_id}:</strong>\n\n{promo_text}",
            parse_mode='HTML'
        )
    await promo_message(message)
    await state.clear()


@rt.callback_query(F.data == 'delete_promo')
async def delete_promo(callback: CallbackQuery, page: int = 1):
    async with async_session() as session:
        total_promos = await rq.get_promo_count(session)
        await callback.answer('‚ùå –£–¥–∞–ª–∏—Ç—å')
        if total_promos == 0:
            await callback.message.edit_text("‚ùóÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ—Ç.", reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="promo")]]))
            return

        total_pages = (total_promos + 4) // 5
        page = (page - 1) % total_pages + 1
        offset = (page - 1) * 5
        promo_codes = await rq.get_promo_codes(session, offset=offset)

        await callback.message.edit_text(
            "üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=get_delete_promo_buttons(page, total_pages, promo_codes)
        )
def get_delete_promo_buttons(page, total_pages, promo_codes):
    buttons = []
    for promo in promo_codes:
        buttons.append(
            [InlineKeyboardButton(text=f"üóëÔ∏è {promo.promo_name}", callback_data=f"delete_promo_{promo.promo_name}")])

    buttons.append([
        InlineKeyboardButton(text="‚ùÆ", callback_data=f"delete_page_{page - 1}"),
        InlineKeyboardButton(text=f"{page}/{total_pages}", callback_data="null"),
        InlineKeyboardButton(text="‚ùØ", callback_data=f"delete_page_{page + 1}")
    ])
    buttons.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="promo")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)
@rt.callback_query(F.data.startswith('delete_promo_'))
async def delete_selected_promo(callback: CallbackQuery):
    promo_name = callback.data.split('_')[2]
    async with async_session() as session:
        await rq.delete_promo_code(session, promo_name)

    await callback.answer(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ {promo_name} —É–¥–∞–ª–µ–Ω!", show_alert=True)

    await delete_promo(callback)


@rt.callback_query(F.data == 'promo_for_sub')
async def promo_for_sub(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    async with async_session() as session:
        user = await rq.get_user(session, user_id)

        if user.active_promo_code:
            remaining_days = (user.promo_expiration - datetime.now()).days
            if remaining_days > 0:
                await callback.answer(
                    f"üìÖ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥", show_alert=True
                )
                return


        await callback.message.edit_text("<strong>–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥</strong>", reply_markup=kb.backtosub, parse_mode='HTML')
        await state.set_state(UserState.waiting_for_promo_code)
@rt.message(F.text, UserState.waiting_for_promo_code)
async def promo_code_entered(message: Message, state: FSMContext):
    promo_code = message.text.strip()
    await state.update_data(promo_code=promo_code)
    if promo_code == 'üéØ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await state.clear()
        await main_menu(message, state)
        return
    elif promo_code == 'üë• –ü–æ–¥–¥–µ—Ä–∂–∫–∞':
        await state.clear()
        await main_support(message)
        return
    async with async_session() as session:
        promo = await rq.get_promo_info(session, promo_code)

        if not promo:
            await message.answer("‚ùå")
            return

        if len(promo.users_used) >= promo.max_uses:
            await message.answer("‚ùå")
            return

        user_id = message.from_user.id
        user = await rq.get_user(session, user_id)

        if user_id in promo.users_used:
            await message.answer("‚ùå")
            return

        if user.active_promo_code:
            await message.answer("‚ùå")
            return
        if promo.promo_type == 'discount':
            user.active_promo_code = promo.promo_name
            user.promo_expiration = datetime.now() + timedelta(days=promo.duration)


        promo_value = f"{promo.promo_info_freedays} –¥–Ω–µ–π" if promo.promo_type == "freedays" else f"{promo.promo_info_discount}%"
        if promo.promo_type == 'discount':
            expiration_date = user.promo_expiration.strftime('%d.%m %H:%M')

            await message.answer(
                f"<strong>‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–µ–Ω –¥–æ {expiration_date}</strong>\n\n"
                f"–†–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏: {promo_value}",
                parse_mode='HTML', reply_markup=kb.backtosub
            )
            promo.users_used.append(user_id)
            await state.clear()
        if promo.promo_type == 'freedays':
            if user.subscription_type == 'gold' and promo.subscription_type == 'gold':
                user.subscription += promo.promo_info_freedays
                await message.answer(
                    f"<strong>‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω</strong>\n\n"
                    f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {promo_value}",
                    parse_mode='HTML', reply_markup=kb.backtosub
                )
                promo.users_used.append(user_id)
                await state.clear()
            elif user.subscription_type in ['spot', 'artists'] and promo.subscription_type == 'basic':
                user.subscription += promo.promo_info_freedays
                await message.answer(
                    f"<strong>‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω</strong>\n\n"
                    f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {promo_value}",
                    parse_mode='HTML', reply_markup=kb.backtosub
                )
                promo.users_used.append(user_id)
                await state.clear()
            elif user.subscription_type == '–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞':
                if promo.subscription_type == 'gold':
                    user.subscription += promo.promo_info_freedays
                    user.subscription_type = 'gold'
                    await message.answer(
                        f"<strong>‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω</strong>\n\n"
                        f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {promo_value}",
                        parse_mode='HTML', reply_markup=kb.backtosub
                    )
                else:
                    await message.answer(
                        f"<strong>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –ø–æ–¥–ø–∏—Å–∫–∏:</strong>",
                        parse_mode='HTML', reply_markup=kb.spot_artists_for_users
                    )
            else:
                await message.answer("‚ùå")
                return
        await session.commit()
@rt.callback_query(F.data.startswith('promo_sub_choice_'))
async def promo_sub_selected_spot_artists(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    promo_code = data.get("promo_code")
    if "spot" in callback.data:
        subscription_type = "spot"
    else:
        subscription_type = "artists"
    async with async_session() as session:
        promo = await rq.get_promo_info(session, promo_code)
        user_id = callback.from_user.id
        user = await rq.get_user(session, user_id)
        promo_value = f"{promo.promo_info_freedays} –¥–Ω–µ–π" if promo.promo_type == "freedays" else f"{promo.promo_info_discount}%"
        user.subscription_type = subscription_type
        user.subscription += promo.promo_info_freedays
        await callback.message.edit_text(
            f"<strong>‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω</strong>\n\n"
            f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {promo_value}\n"
            f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞: {subscription_type}",

            parse_mode='HTML', reply_markup=kb.backtosub
        )
        await session.commit()


##
@rt.callback_query(F.data == 'ffind')
async def ffind(callback: CallbackQuery):
    if is_admin(callback.from_user.id):
        await callback.answer('üíª FlowFind')
        await callback.message.edit_text('<strong>–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ:</strong>',
                                         reply_markup=kb.spot_artists,
                                         parse_mode='HTML')
@rt.callback_query(F.data == 'artists')
async def artists(callback: CallbackQuery):
    if is_admin(callback.from_user.id):
        await callback.answer('artists')
        await callback.message.edit_text('<strong>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ:</strong>',
                                         reply_markup=kb.ff,
                                         parse_mode='HTML')
@rt.callback_query(F.data == 'spot')
async def spot(callback: CallbackQuery):
    if is_admin(callback.from_user.id):
        await callback.answer('spot')
        await callback.message.edit_text('<strong>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ:</strong>',
                                         reply_markup=kb.spot,
                                         parse_mode='HTML')

@rt.callback_query(F.data == 'db_back')
async def db_back(callback: CallbackQuery, state: FSMContext):
    if is_admin(callback.from_user.id):
        await callback.answer('‚Ü©Ô∏è–ù–∞–∑–∞–¥')
        await callback.message.edit_text('<strong>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ:</strong>',
                                         reply_markup=kb.ff,
                                         parse_mode='HTML')
    await state.clear()
@rt.callback_query(F.data == 'db_back_spot')
async def db_back_spot(callback: CallbackQuery, state: FSMContext):
    if is_admin(callback.from_user.id):
        await callback.answer('‚Ü©Ô∏è–ù–∞–∑–∞–¥')
        await callback.message.edit_text('<strong>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ:</strong>',
                                         reply_markup=kb.spot,
                                         parse_mode='HTML')
    await state.clear()
##
@rt.callback_query(F.data == 'ffback')
async def ffback(callback: CallbackQuery, state: FSMContext):
    await callback.answer('‚Ü©Ô∏è –ù–∞–∑–∞–¥')
    await callback.message.edit_text('<strong>–í–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</strong>',
                                     reply_markup=kb.adm_start,
                                     parse_mode='HTML')
    await state.clear()

@rt.callback_query(F.data == 'adm_back')
async def abm_back(callback: CallbackQuery, state: FSMContext):
    await callback.answer('‚öôÔ∏è ADMIN PANEL')
    await callback.message.edit_text('<strong>–í–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</strong>', reply_markup=kb.adm_start,
                                     parse_mode='HTML')
    await state.clear()

##

@rt.callback_query(F.data == 'sub')
async def start_subscription(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id

    if not is_admin(user_id):
        await callback.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!", reply_markup=kb.adm_back)
        return
    await state.set_state(AdminAction.waiting_for_user_username_subscription)
    await callback.answer('üéüÔ∏è –í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É')
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ username –∏–ª–∏ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ @username, "
                                     "–¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É:", reply_markup=kb.adm_back)
@rt.message(AdminAction.waiting_for_user_username_subscription)
async def get_user_username(message: Message, state: FSMContext):
    user_input = message.text.strip()

    async with async_session() as session:
        try:
            if user_input.isdigit():  
                user_id = int(user_input)
                result = await session.execute(select(User).where(User.user_id == user_id))
            elif user_input.startswith('@') and len(user_input) > 1 and user_input[1:].replace("_", "").replace(".", "").isalnum():
                username = user_input[1:].strip().lower()
                result = await session.execute(select(User).where(User.username.ilike(username)))
            else:
                await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username (@username) –∏–ª–∏ ID (—á–∏—Å–ª–æ).",
                                     reply_markup=kb.adm_back)
                return

            user = result.scalar_one_or_none()

            if not user:
                await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_input} –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=kb.adm_back)
                return

            await state.update_data(username=user.user_id)

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", reply_markup=kb.adm_back)
            return

    await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {f'@{user.username}' if user.username != '–ù–µ—É–∫–∞–∑–∞–Ω–æ' else user.user_id}:",
                         reply_markup=kb.gold_spot_artists)
@rt.callback_query(F.data.in_(['give_gold', 'give_spot', 'give_artists']))
async def set_subscription_type(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    username = data['username']

    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == username))
        user = result.scalar_one_or_none()

        if not user:
            await callback.message.edit_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {f'@{user.username}' if user.username != '–ù–µ—É–∫–∞–∑–∞–Ω–æ' else username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ", reply_markup=kb.adm_back)
            return

        new_type = callback.data.replace('give_', '')
        current_type = user.subscription_type

        if new_type == current_type:
            await callback.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏:",
                                             reply_markup=kb.adm_add)
            await state.update_data(new_type=new_type, sum_days=True)
        elif (new_type == 'spot' and current_type == 'artists') or (new_type == 'artists' and current_type == 'spot'):
            await callback.message.edit_text(
                f"‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –ø–æ–¥–ø–∏—Å–∫–∞ {current_type}. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–º–µ–Ω—É –Ω–∞ {new_type}. –î–Ω–∏ –±—É–¥—É—Ç —Å—É–º–º–∏—Ä–æ–≤–∞–Ω—ã.",
                reply_markup=kb.confirm_subscription
            )
            await state.update_data(new_type=new_type, sum_days=True)
        elif (new_type == 'gold' and current_type in ['artists', 'spot']) or (current_type == 'gold' and new_type in ['artists', 'spot']):
            await callback.message.edit_text(
                f"‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–¥–ø–∏—Å–∫–∞ {current_type}. –í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ {new_type}:",
                reply_markup=kb.adm_add
            )
            await state.update_data(new_type=new_type, sum_days=False)
        else:
            await callback.message.edit_text(f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–º–µ–Ω—É –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {new_type}. –î–Ω–∏ –±—É–¥—É—Ç —Å—É–º–º–∏—Ä–æ–≤–∞–Ω—ã.",
                                             reply_markup=kb.confirm_subscription)
            await state.update_data(new_type=new_type, sum_days=True)

    await state.set_state(AdminAction.waiting_for_subscription_days)
@rt.callback_query(F.data == 'confirm_sub')
async def confirm_subscription(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    username = data['username']
    new_type = data['new_type']
    sum_days = data['sum_days']

    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == username))
        user = result.scalar_one_or_none()

        if not user:
            await callback.message.edit_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {f'@{user.username}' if user.username != '–ù–µ—É–∫–∞–∑–∞–Ω–æ' else username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ", reply_markup=kb.adm_back)
            return

        user.subscription_type = new_type
        await session.commit()
        await callback.answer('‚úÖ –£—Å–ø–µ—à–Ω–æ')
        await callback.message.edit_text(
            f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {new_type}. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏:",
            reply_markup=kb.adm_add
        )
        await state.set_state(AdminAction.waiting_for_subscription_days)
        await state.update_data(sum_days=sum_days)
@rt.message(AdminAction.waiting_for_subscription_days)
async def get_subscription_days(message: Message, state: FSMContext):
    data = await state.get_data()
    username = data['username']
    new_type = data['new_type']
    sum_days = data['sum_days']

    try:
        days = int(message.text.strip())
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)",
                             reply_markup=kb.adm_add)
        return

    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == username))
        user = result.scalar_one_or_none()

        if not user:
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {f'@{user.username}' if user.username != '–ù–µ—É–∫–∞–∑–∞–Ω–æ' else username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ",
                                 reply_markup=kb.adm_back)
            return

        if sum_days:
            user.subscription += days
        else:
            user.subscription = days

        user.paid_sub = 1
        user.subscription_start = datetime.now(pytz.timezone('Europe/Moscow'))
        user.subscription_type = new_type
        if user.active_promo_code:
            promo_info = await rq.get_promo_info(session, user.active_promo_code)

            if promo_info and promo_info.subscription_type in ["basic", "basic+gold"] and new_type in ["artists", "spot"]:
                user.active_promo_code = None
                user.promo_expiration = None
                user.notified_one_day = False

            elif promo_info and promo_info.subscription_type in ["gold", "basic+gold"] and new_type == "gold":
                user.active_promo_code = None
                user.promo_expiration = None
                user.notified_one_day = False
        await message.answer(
            f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {f'@{user.username}' if user.username != '–ù–µ—É–∫–∞–∑–∞–Ω–æ' else username} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {user.subscription_type} –Ω–∞ {days} –¥–Ω–µ–π.",
            reply_markup=kb.adm_start
        )
        await session.commit()

    await state.clear()
@rt.callback_query(F.data == 'adm_give')
async def give_30_days(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    username = data['username']
    new_type = data.get('new_type')
    sum_days = data.get('sum_days', True)
    days = 30

    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == username))
        user = result.scalar_one_or_none()

        if not user:
            await callback.answer('‚ùå –û—à–∏–±–∫–∞')
            await callback.message.edit_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {f'@{user.username}' if user.username != '–ù–µ—É–∫–∞–∑–∞–Ω–æ' else username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.", reply_markup=kb.adm_back)
            return

        if new_type and user.subscription_type != new_type:
            user.subscription_type = new_type

        if sum_days:
            user.subscription += days
        else:
            user.subscription = days

        user.paid_sub = 1
        user.subscription_start = datetime.now(pytz.timezone('Europe/Moscow'))
        if user.active_promo_code:
            promo_info = await rq.get_promo_info(session, user.active_promo_code)

            if promo_info and promo_info.subscription_type in ["basic", "basic+gold"] and new_type in ["artists", "spot"]:
                user.active_promo_code = None
                user.promo_expiration = None
                user.notified_one_day = False

            elif promo_info and promo_info.subscription_type in ["gold", "basic+gold"] and new_type == "gold":
                user.active_promo_code = None
                user.promo_expiration = None
                user.notified_one_day = False
        await callback.answer('‚úÖ –£—Å–ø–µ—à–Ω–æ')
        await callback.message.edit_text(
            f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {f'@{user.username}' if user.username != '–ù–µ—É–∫–∞–∑–∞–Ω–æ' else username} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {user.subscription_type} –Ω–∞ {days} –¥–Ω–µ–π.",
            reply_markup=kb.adm_start
        )
        await session.commit()

    await state.clear()


@rt.callback_query(F.data == 'gsub')
async def check_subscription_request(callback: CallbackQuery, state: FSMContext):
    await callback.answer('ü™™ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É')
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ @username, —á—å—é –ø–æ–¥–ø–∏—Å–∫—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å:",
        reply_markup=kb.adm_back)

    await state.set_state(AdminAction.waiting_for_user_username_check)

@rt.message(AdminAction.waiting_for_user_username_check)
async def get_user_subscription(message: Message, state: FSMContext):
    username_input = message.text.strip()

    if not username_input.startswith('@') or len(username_input) < 2 or not username_input[1:].replace("_", "").replace(".", "").isalnum():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username –≤ —Ñ–æ—Ä–º–∞—Ç–µ @username")
        return

    username = username_input[1:]

    async with async_session() as session:
        result = await session.execute(select(User).filter(User.username == username))
        user = result.scalar_one_or_none()

        if not user:
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å username @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –∏–º–µ–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É {user.subscription_type} –Ω–∞ {user.subscription} –¥–Ω–µ–π. "
                             f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb.adm_start)

    await state.clear()



@rt.callback_query(F.data == 'gpack')
async def check_packs(callback: CallbackQuery, state: FSMContext):
    await callback.answer('üíæ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞–∫–∏')

    async with async_session() as session:
        result = await session.execute(select(User))
        users = result.scalars().all()

        excluded_usernames = ['–ù–µ—É–∫–∞–∑–∞–Ω–æ', 'chofpiee']

        artist_counts = []
        spot_counts = []

        for user in users:
            username = user.username or 'no_username'
            if username in excluded_usernames:
                continue  
            artist_count = len(user.received_packs or [])
            spot_count = len(user.received_packs_spot or [])

            artist_counts.append((artist_count, user.username))
            spot_counts.append((spot_count, user.username))

        artist_counts.sort(reverse=True)
        spot_counts.sort(reverse=True)

        top_artists = artist_counts[:20]
        top_spots = spot_counts[:20]

        artist_text = "üé§ –¢–æ–ø 20 –∞—Ä—Ç–∏—Å—Ç–æ–≤:\n"
        for idx, (count, username) in enumerate(top_artists, 1):
            artist_text += f"{idx}. {count} ‚Äì @{username}\n"

        spot_text = "\nüéß –¢–æ–ø 20 —Å–ø–æ—Ç–µ—Ä–æ–≤:\n"
        for idx, (count, username) in enumerate(top_spots, 1):
            spot_text += f"{idx}. {count} ‚Äì @{username}\n"

        text_spot_artist = artist_text + spot_text

        text = (
            f"{text_spot_artist}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ @username, —á—å–∏ –ø–∞–∫–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å:"
        )

        await callback.message.edit_text(text, reply_markup=kb.adm_back)
        await state.set_state(AdminAction.waiting_for_user_username_check_packs)


@rt.message(AdminAction.waiting_for_user_username_check_packs)
async def get_user_subscription(message: Message, state: FSMContext):
    username_input = message.text.strip()

    if not username_input.startswith('@') or len(username_input) < 2:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username –≤ —Ñ–æ—Ä–º–∞—Ç–µ @username")
        return

    username = username_input[1:].lower()

    async with async_session() as session:
        result = await session.execute(select(User).filter(User.username == username))
        user = result.scalar_one_or_none()

        if not user:
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å username @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        await message.answer(f"–ü–∞–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}: {user.received_packs}, {user.received_packs_spot} "
                             f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb.adm_start)

    await state.clear()


@rt.callback_query(F.data == 'mail')
async def mail(callback: CallbackQuery):
    await callback.answer('üì™ –†–∞—Å—Å—ã–ª–∫–∞')
    await callback.message.edit_text('<strong>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Ä–∞—Å—Å—ã–ª–∫–∏:</strong>', parse_mode='HTML',
                                     reply_markup=kb.mail)
@rt.callback_query(F.data == 'automail')
async def automail(callback: CallbackQuery):
    await callback.answer('ü§ñ –ê–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∞')
    await callback.message.edit_text('<strong>–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:</strong>', parse_mode='HTML',
                                     reply_markup=kb.group_mail)
@rt.callback_query(F.data == 'mail_choice')
async def mail_choice(callback: CallbackQuery):
    await callback.answer('üì™ –†–∞—Å—Å—ã–ª–∫–∞')
    await callback.message.edit_text('<strong>–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:</strong>', parse_mode='HTML',
                                     reply_markup=kb.fast_mail)


@rt.callback_query(F.data == 'no_sub')
async def no_sub(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id

    if not is_admin(user_id):
        await callback.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!", reply_markup=kb.adm_back)
        return

    await state.set_state(AdminAction.waiting_for_group_no_sub_message)
    await callback.answer('‚ùå –ë–µ–∑ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏')
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=kb.adm_back)
@rt.message(AdminAction.waiting_for_group_no_sub_message)
async def get_mailing_no_sub_message(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏", reply_markup=kb.adm_back)
        return

    mailing_text = message.caption if message.caption else message.text
    photo = message.photo[-1] if message.photo else None

    await state.set_state(AdminAction.waiting_for_time_no_sub)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=kb.adm_back)
    await state.update_data(mailing_text=mailing_text, photo=photo)
@rt.message(AdminAction.waiting_for_time_no_sub)
async def get_time_for_no_sub(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏", reply_markup=kb.adm_back)
        return

    time_text = message.text
    try:
        hour, minute = map(int, time_text.split(':'))
        if hour < 0 or hour > 23 or minute < 0 or minute > 59:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM.", reply_markup=kb.adm_back)
        return

    user_data = await state.get_data()
    mailing_text = user_data.get('mailing_text')
    photo = user_data.get('photo')

    async with async_session() as session:
        result = await session.execute(
            select(MailingSchedule.send_time)
            .filter(MailingSchedule.group_type == 'no_sub')
            .order_by(MailingSchedule.send_time.desc())
        )

        mailings_no_sub = result.scalars().all()

        send_date = len(mailings_no_sub) + 1

        if not mailings_no_sub:
            send_time = datetime.now(pytz.timezone('Europe/Moscow')).replace(hour=hour, minute=minute, second=0,
                                                                             microsecond=0)
        else:
            send_time = datetime.now(pytz.timezone('Europe/Moscow')).replace(hour=hour, minute=minute, second=0,
                                                                             microsecond=0)

        new_schedule = MailingSchedule(
            group_type='no_sub',
            message_text=mailing_text,
            send_time=send_time,
            send_date=send_date
        )

        async with async_session() as session:
            session.add(new_schedule)
            await session.commit()

    await message.answer(f"–°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {send_time.strftime('%H:%M')} –¥–ª—è –≥—Ä—É–ø–ø—ã –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏.",
                         reply_markup=kb.adm_back)
    await state.clear()

@rt.callback_query(F.data == 'end_sub')
async def end_sub(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id

    if not is_admin(user_id):
        await callback.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!", reply_markup=kb.adm_back)
        return

    await state.set_state(AdminAction.waiting_for_group_end_sub_message)
    await callback.answer('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞')
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=kb.adm_back)
@rt.message(AdminAction.waiting_for_group_end_sub_message)
async def get_mailing_end_sub_message(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏", reply_markup=kb.adm_back)
        return

    mailing_text = message.caption if message.caption else message.text
    photo = message.photo[-1] if message.photo else None

    await state.set_state(AdminAction.waiting_for_time_end_sub)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=kb.adm_back)
    await state.update_data(mailing_text=mailing_text, photo=photo)
@rt.message(AdminAction.waiting_for_time_end_sub)
async def get_time_for_end_sub(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏", reply_markup=kb.adm_back)
        return

    time_text = message.text
    try:
        hour, minute = map(int, time_text.split(':'))
        if hour < 0 or hour > 23 or minute < 0 or minute > 59:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM.", reply_markup=kb.adm_back)
        return

    user_data = await state.get_data()
    mailing_text = user_data.get('mailing_text')
    photo = user_data.get('photo')

    async with async_session() as session:
        result = await session.execute(
            select(MailingSchedule.send_time)
            .filter(MailingSchedule.group_type == 'end_sub')
            .order_by(MailingSchedule.send_time.desc())
        )

        mailings_end_sub = result.scalars().all()

        send_date = len(mailings_end_sub) + 1

        if not mailings_end_sub:
            send_time = datetime.now(pytz.timezone('Europe/Moscow')).replace(hour=hour, minute=minute, second=0,
                                                                             microsecond=0)
        else:
            send_time = datetime.now(pytz.timezone('Europe/Moscow')).replace(hour=hour, minute=minute, second=0,
                                                                             microsecond=0)

        new_schedule = MailingSchedule(
            group_type='end_sub',
            message_text=mailing_text,
            send_time=send_time,
            send_date=send_date
        )

        async with async_session() as session:
            session.add(new_schedule)
            await session.commit()

    await message.answer(
        f"–°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {send_time.strftime('%H:%M')} –¥–ª—è –≥—Ä—É–ø–ø—ã —Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π.",
        reply_markup=kb.adm_back)
    await state.clear()


@rt.callback_query(F.data == 'mailing')
async def start_mailing(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id

    if not is_admin(user_id):
        await callback.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!", reply_markup=kb.adm_back)
        return

    await state.set_state(AdminAction.waiting_for_message)
    await callback.answer('üì™ –û–±—â–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞')
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=kb.adm_back)
@rt.message(AdminAction.waiting_for_message)
async def get_mailing_message(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏", reply_markup=kb.adm_back)
        return

    mailing_text = message.caption if message.caption else message.text
    photo = message.photo[-1] if message.photo else None
    video = message.video if message.video else None
    document = message.document if message.document else None
    audio = message.audio if message.audio else None

    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id.isnot(None)))
        users = result.scalars().all()

        if not users:
            await message.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏", reply_markup=kb.adm_back)
            return

        print(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {[user.user_id for user in users]}")
        for user in users:
            try:
                print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID: {user.user_id}")

                if photo:
                    photo_file = photo.file_id
                    if mailing_text:
                        await message.bot.send_photo(user.user_id, photo_file, caption=mailing_text, parse_mode='HTML')
                    else:
                        await message.bot.send_photo(user.user_id, photo_file)

                elif video:
                    video_file = video.file_id
                    if mailing_text:
                        await message.bot.send_video(user.user_id, video_file, caption=mailing_text)
                    else:
                        await message.bot.send_video(user.user_id, video_file)

                elif document:
                    document_file = document.file_id
                    if mailing_text:
                        await message.bot.send_document(user.user_id, document_file, caption=mailing_text)
                    else:
                        await message.bot.send_document(user.user_id, document_file)

                elif audio:
                    audio_file = audio.file_id
                    if mailing_text:
                        await message.bot.send_audio(user.user_id, audio_file, caption=mailing_text)
                    else:
                        await message.bot.send_audio(user.user_id, audio_file)

                elif mailing_text:
                    await message.bot.send_message(user.user_id, mailing_text, parse_mode='HTML',
                                                   disable_web_page_preview=True)

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.user_id}: {e}")

        await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", reply_markup=kb.adm_back)
        await state.clear()

@rt.callback_query(F.data == 'for_sub')
async def for_sub(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id

    if not is_admin(user_id):
        await callback.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!", reply_markup=kb.adm_back)
        return

    await state.set_state(AdminAction.waiting_for_sub_message)
    await callback.answer('üí∞ –î–ª—è –ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤')
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º:", reply_markup=kb.adm_back)
@rt.message(AdminAction.waiting_for_sub_message)
async def get_mailing_for_sub(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏", reply_markup=kb.adm_back)
        return

    mailing_text = message.caption if message.caption else message.text
    photo = message.photo[-1] if message.photo else None
    video = message.video if message.video else None
    document = message.document if message.document else None
    audio = message.audio if message.audio else None

    async with async_session() as session:
        result = await session.execute(select(User).filter(User.subscription > 0, User.paid_sub == 1))
        users = result.scalars().all()

        if not users:
            await message.answer("–ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏", reply_markup=kb.adm_back)
            return

        for user in users:
            try:
                print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID: {user.user_id}")

                if photo:
                    photo_file = photo.file_id
                    if mailing_text:
                        await message.bot.send_photo(user.user_id, photo_file, caption=mailing_text, parse_mode='HTML')
                    else:
                        await message.bot.send_photo(user.user_id, photo_file)

                elif video:
                    video_file = video.file_id
                    if mailing_text:
                        await message.bot.send_video(user.user_id, video_file, caption=mailing_text)
                    else:
                        await message.bot.send_video(user.user_id, video_file)

                elif document:
                    document_file = document.file_id
                    if mailing_text:
                        await message.bot.send_document(user.user_id, document_file, caption=mailing_text)
                    else:
                        await message.bot.send_document(user.user_id, document_file)

                elif audio:
                    audio_file = audio.file_id
                    if mailing_text:
                        await message.bot.send_audio(user.user_id, audio_file, caption=mailing_text)
                    else:
                        await message.bot.send_audio(user.user_id, audio_file)

                elif mailing_text:
                    await message.bot.send_message(user.user_id, mailing_text, parse_mode='HTML',
                                                   disable_web_page_preview=True)

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫—É {user.user_id}: {e}")

    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º", reply_markup=kb.adm_back)
    await state.clear()

@rt.callback_query(F.data == 'who_free')
async def who_free(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id

    if not is_admin(user_id):
        await callback.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!", reply_markup=kb.adm_back)
        return

    await state.set_state(AdminAction.waiting_for_who_free_message)
    await callback.answer('üÜì –ö—Ç–æ –±—Ä–∞–ª –±–µ—Å–ø–ª–∞—Ç–Ω—É—é')
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Ç–µ–º, –∫—Ç–æ –±—Ä–∞–ª –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É:", reply_markup=kb.adm_back)
@rt.message(AdminAction.waiting_for_who_free_message)
async def get_mailing_who_free(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏", reply_markup=kb.adm_back)
        return

    photo = message.photo[-1] if message.photo else None
    video = message.video if message.video else None
    document = message.document if message.document else None
    audio = message.audio if message.audio else None
    mailing_text = message.caption if message.caption else message.text

    async with async_session() as session:
        result = await session.execute(select(User).filter(User.free_subscription_used == True, User.paid_sub == 0, User.subscription == 0))
        users = result.scalars().all()

        if not users:
            await message.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫—Ç–æ –±—Ä–∞–ª –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É", reply_markup=kb.adm_back)
            return

        for user in users:
            try:
                print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID: {user.user_id}")

                if photo:
                    photo_file = photo.file_id
                    if mailing_text:
                        await message.bot.send_photo(user.user_id, photo_file, caption=mailing_text, parse_mode='HTML')
                    else:
                        await message.bot.send_photo(user.user_id, photo_file)

                elif video:
                    video_file = video.file_id
                    if mailing_text:
                        await message.bot.send_video(user.user_id, video_file, caption=mailing_text)
                    else:
                        await message.bot.send_video(user.user_id, video_file)

                elif document:
                    document_file = document.file_id
                    if mailing_text:
                        await message.bot.send_document(user.user_id, document_file, caption=mailing_text)
                    else:
                        await message.bot.send_document(user.user_id, document_file)

                elif audio:
                    audio_file = audio.file_id
                    if mailing_text:
                        await message.bot.send_audio(user.user_id, audio_file, caption=mailing_text)
                    else:
                        await message.bot.send_audio(user.user_id, audio_file)

                elif mailing_text:
                    await message.bot.send_message(user.user_id, mailing_text, parse_mode='HTML',
                                                   disable_web_page_preview=True)

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è {user.user_id}: {e}")

    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ–º, –∫—Ç–æ –±—Ä–∞–ª –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É", reply_markup=kb.adm_back)
    await state.clear()

@rt.callback_query(F.data == 'who_no_free')
async def who_no_free(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id

    if not is_admin(user_id):
        await callback.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!", reply_markup=kb.adm_back)
        return

    await state.set_state(AdminAction.waiting_for_who_no_free_message)
    await callback.answer('üÜì –ö—Ç–æ –Ω–µ –±—Ä–∞–ª –±–µ—Å–ø–ª–∞—Ç–Ω—É—é')
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Ç–µ–º, –∫—Ç–æ –Ω–µ –±—Ä–∞–ª –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É:", reply_markup=kb.adm_back)
@rt.message(AdminAction.waiting_for_who_no_free_message)
async def get_mailing_who_no_free(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏", reply_markup=kb.adm_back)
        return

    mailing_text = message.caption if message.caption else message.text
    photo = message.photo[-1] if message.photo else None
    video = message.video if message.video else None
    document = message.document if message.document else None
    audio = message.audio if message.audio else None
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.free_subscription_used == False, User.paid_sub == 0, User.subscription == 0))
        users = result.scalars().all()

        if not users:
            await message.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫—Ç–æ –Ω–µ –±—Ä–∞–ª –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É", reply_markup=kb.adm_back)
            return

        for user in users:
            try:
                print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID: {user.user_id}")

                if photo:
                    photo_file = photo.file_id
                    if mailing_text:
                        await message.bot.send_photo(user.user_id, photo_file, caption=mailing_text, parse_mode='HTML')
                    else:
                        await message.bot.send_photo(user.user_id, photo_file)

                elif video:
                    video_file = video.file_id
                    if mailing_text:
                        await message.bot.send_video(user.user_id, video_file, caption=mailing_text)
                    else:
                        await message.bot.send_video(user.user_id, video_file)

                elif document:
                    document_file = document.file_id
                    if mailing_text:
                        await message.bot.send_document(user.user_id, document_file, caption=mailing_text)
                    else:
                        await message.bot.send_document(user.user_id, document_file)

                elif audio:
                    audio_file = audio.file_id
                    if mailing_text:
                        await message.bot.send_audio(user.user_id, audio_file, caption=mailing_text)
                    else:
                        await message.bot.send_audio(user.user_id, audio_file)

                elif mailing_text:
                    await message.bot.send_message(user.user_id, mailing_text, parse_mode='HTML',
                                                   disable_web_page_preview=True)

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è {user.user_id}: {e}")

    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ–º, –∫—Ç–æ –Ω–µ –±—Ä–∞–ª –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É", reply_markup=kb.adm_back)
    await state.clear()

@rt.callback_query(F.data == 'who_paid')
async def for_sub(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id

    if not is_admin(user_id):
        await callback.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!", reply_markup=kb.adm_back)
        return

    await state.set_state(AdminAction.waiting_for_who_paid_message)
    await callback.answer('üí∞ –ö—Ç–æ –±—Ä–∞–ª –ø–ª–∞—Ç–Ω—É—é')
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –±—ã–≤—à–∏–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º:", reply_markup=kb.adm_back)
@rt.message(AdminAction.waiting_for_who_paid_message)
async def get_mailing_for_paid_sub(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏", reply_markup=kb.adm_back)
        return

    mailing_text = message.caption if message.caption else message.text
    photo = message.photo[-1] if message.photo else None
    video = message.video if message.video else None
    document = message.document if message.document else None
    audio = message.audio if message.audio else None
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.subscription == 0, User.paid_sub == 1))
        users = result.scalars().all()

        if not users:
            await message.answer("–ù–µ—Ç —é–∑–µ—Ä–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏", reply_markup=kb.adm_back)
            return

        for user in users:
            try:
                print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID: {user.user_id}")

                if photo:
                    photo_file = photo.file_id
                    if mailing_text:
                        await message.bot.send_photo(user.user_id, photo_file, caption=mailing_text, parse_mode='HTML')
                    else:
                        await message.bot.send_photo(user.user_id, photo_file)

                elif video:
                    video_file = video.file_id
                    if mailing_text:
                        await message.bot.send_video(user.user_id, video_file, caption=mailing_text)
                    else:
                        await message.bot.send_video(user.user_id, video_file)

                elif document:
                    document_file = document.file_id
                    if mailing_text:
                        await message.bot.send_document(user.user_id, document_file, caption=mailing_text)
                    else:
                        await message.bot.send_document(user.user_id, document_file)

                elif audio:
                    audio_file = audio.file_id
                    if mailing_text:
                        await message.bot.send_audio(user.user_id, audio_file, caption=mailing_text)
                    else:
                        await message.bot.send_audio(user.user_id, audio_file)

                elif mailing_text:
                    await message.bot.send_message(user.user_id, mailing_text, parse_mode='HTML',
                                                   disable_web_page_preview=True)

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —é–∑–µ—Ä—É {user.user_id}: {e}")

    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —é–∑–µ—Ä–∞–º", reply_markup=kb.adm_back)
    await state.clear()

@rt.callback_query(F.data == 'who_in_free_sub')
async def for_sub(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id

    if not is_admin(user_id):
        await callback.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!", reply_markup=kb.adm_back)
        return

    await state.set_state(AdminAction.waiting_for_who_in_free_message)
    await callback.answer('üÜì –î–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤')
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º:", reply_markup=kb.adm_back)
@rt.message(AdminAction.waiting_for_who_in_free_message)
async def get_mailing_for_paid_sub(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏", reply_markup=kb.adm_back)
        return

    mailing_text = message.caption if message.caption else message.text
    photo = message.photo[-1] if message.photo else None
    video = message.video if message.video else None
    document = message.document if message.document else None
    audio = message.audio if message.audio else None
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.subscription > 0, User.paid_sub == 0, User.free_subscription_used == True))
        users = result.scalars().all()

        if not users:
            await message.answer("–ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏", reply_markup=kb.adm_back)
            return

        for user in users:
            try:
                print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID: {user.user_id}")

                if photo:
                    photo_file = photo.file_id
                    if mailing_text:
                        await message.bot.send_photo(user.user_id, photo_file, caption=mailing_text, parse_mode='HTML')
                    else:
                        await message.bot.send_photo(user.user_id, photo_file)

                elif video:
                    video_file = video.file_id
                    if mailing_text:
                        await message.bot.send_video(user.user_id, video_file, caption=mailing_text)
                    else:
                        await message.bot.send_video(user.user_id, video_file)

                elif document:
                    document_file = document.file_id
                    if mailing_text:
                        await message.bot.send_document(user.user_id, document_file, caption=mailing_text)
                    else:
                        await message.bot.send_document(user.user_id, document_file)

                elif audio:
                    audio_file = audio.file_id
                    if mailing_text:
                        await message.bot.send_audio(user.user_id, audio_file, caption=mailing_text)
                    else:
                        await message.bot.send_audio(user.user_id, audio_file)

                elif mailing_text:
                    await message.bot.send_message(user.user_id, mailing_text, parse_mode='HTML',
                                                   disable_web_page_preview=True)

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —é–∑–µ—Ä—É {user.user_id}: {e}")

    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º", reply_markup=kb.adm_back)
    await state.clear()

@rt.callback_query(F.data == 'gold_mail')
async def gold_mail(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id

    if not is_admin(user_id):
        await callback.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!", reply_markup=kb.adm_back)
        return

    await state.set_state(AdminAction.waiting_for_who_gold_mail)
    await callback.answer('GOLD')
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ GOLD –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º:", reply_markup=kb.adm_back)
@rt.message(AdminAction.waiting_for_who_gold_mail)
async def get_mailing_for_gold_mail(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏", reply_markup=kb.adm_back)
        return

    mailing_text = message.caption if message.caption else message.text
    photo = message.photo[-1] if message.photo else None
    video = message.video if message.video else None
    document = message.document if message.document else None
    audio = message.audio if message.audio else None

    async with async_session() as session:
        result = await session.execute(select(User).filter(User.subscription > 0, User.paid_sub == 1, User.subscription_type == 'gold'))
        users = result.scalars().all()

        if not users:
            await message.answer("–ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏", reply_markup=kb.adm_back)
            return

        for user in users:
            try:
                print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID: {user.user_id}")

                if photo:
                    photo_file = photo.file_id
                    if mailing_text:
                        await message.bot.send_photo(user.user_id, photo_file, caption=mailing_text, parse_mode='HTML')
                    else:
                        await message.bot.send_photo(user.user_id, photo_file)

                elif video:
                    video_file = video.file_id
                    if mailing_text:
                        await message.bot.send_video(user.user_id, video_file, caption=mailing_text)
                    else:
                        await message.bot.send_video(user.user_id, video_file)

                elif document:
                    document_file = document.file_id
                    if mailing_text:
                        await message.bot.send_document(user.user_id, document_file, caption=mailing_text)
                    else:
                        await message.bot.send_document(user.user_id, document_file)

                elif audio:
                    audio_file = audio.file_id
                    if mailing_text:
                        await message.bot.send_audio(user.user_id, audio_file, caption=mailing_text)
                    else:
                        await message.bot.send_audio(user.user_id, audio_file)

                elif mailing_text:
                    await message.bot.send_message(user.user_id, mailing_text, parse_mode='HTML',
                                                   disable_web_page_preview=True)

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫—É {user.user_id}: {e}")

    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º", reply_markup=kb.adm_back)
    await state.clear()

@rt.callback_query(F.data == 'spot_mail')
async def spot_mail(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id

    if not is_admin(user_id):
        await callback.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!", reply_markup=kb.adm_back)
        return

    await state.set_state(AdminAction.waiting_for_who_spot_mail)
    await callback.answer('SPOT')
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ SPOT –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º:", reply_markup=kb.adm_back)
@rt.message(AdminAction.waiting_for_who_spot_mail)
async def get_mailing_spot_mail(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏", reply_markup=kb.adm_back)
        return

    mailing_text = message.caption if message.caption else message.text
    photo = message.photo[-1] if message.photo else None
    video = message.video if message.video else None
    document = message.document if message.document else None
    audio = message.audio if message.audio else None

    async with async_session() as session:
        result = await session.execute(select(User).filter(User.subscription > 0, User.paid_sub == 1, User.subscription_type == 'spot'))
        users = result.scalars().all()

        if not users:
            await message.answer("–ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏", reply_markup=kb.adm_back)
            return

        for user in users:
            try:
                print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID: {user.user_id}")

                if photo:
                    photo_file = photo.file_id
                    if mailing_text:
                        await message.bot.send_photo(user.user_id, photo_file, caption=mailing_text, parse_mode='HTML')
                    else:
                        await message.bot.send_photo(user.user_id, photo_file)

                elif video:
                    video_file = video.file_id
                    if mailing_text:
                        await message.bot.send_video(user.user_id, video_file, caption=mailing_text)
                    else:
                        await message.bot.send_video(user.user_id, video_file)

                elif document:
                    document_file = document.file_id
                    if mailing_text:
                        await message.bot.send_document(user.user_id, document_file, caption=mailing_text)
                    else:
                        await message.bot.send_document(user.user_id, document_file)

                elif audio:
                    audio_file = audio.file_id
                    if mailing_text:
                        await message.bot.send_audio(user.user_id, audio_file, caption=mailing_text)
                    else:
                        await message.bot.send_audio(user.user_id, audio_file)

                elif mailing_text:
                    await message.bot.send_message(user.user_id, mailing_text, parse_mode='HTML',
                                                   disable_web_page_preview=True)

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫—É {user.user_id}: {e}")

    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º", reply_markup=kb.adm_back)
    await state.clear()

@rt.callback_query(F.data == 'artists_mail')
async def artists_mail(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id

    if not is_admin(user_id):
        await callback.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!", reply_markup=kb.adm_back)
        return

    await state.set_state(AdminAction.waiting_for_who_artists_mail)
    await callback.answer('ARTISTS')
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ ARTISTS –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º:", reply_markup=kb.adm_back)
@rt.message(AdminAction.waiting_for_who_artists_mail)
async def get_mailing_artists_mail(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏", reply_markup=kb.adm_back)
        return

    mailing_text = message.caption if message.caption else message.text
    photo = message.photo[-1] if message.photo else None
    video = message.video if message.video else None
    document = message.document if message.document else None
    audio = message.audio if message.audio else None

    async with async_session() as session:
        result = await session.execute(select(User).filter(User.subscription > 0, User.paid_sub == 1, User.subscription_type == 'artists'))
        users = result.scalars().all()

        if not users:
            await message.answer("–ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏", reply_markup=kb.adm_back)
            return

        for user in users:
            try:
                print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID: {user.user_id}")

                if photo:
                    photo_file = photo.file_id
                    if mailing_text:
                        await message.bot.send_photo(user.user_id, photo_file, caption=mailing_text, parse_mode='HTML')
                    else:
                        await message.bot.send_photo(user.user_id, photo_file)

                elif video:
                    video_file = video.file_id
                    if mailing_text:
                        await message.bot.send_video(user.user_id, video_file, caption=mailing_text)
                    else:
                        await message.bot.send_video(user.user_id, video_file)

                elif document:
                    document_file = document.file_id
                    if mailing_text:
                        await message.bot.send_document(user.user_id, document_file, caption=mailing_text)
                    else:
                        await message.bot.send_document(user.user_id, document_file)

                elif audio:
                    audio_file = audio.file_id
                    if mailing_text:
                        await message.bot.send_audio(user.user_id, audio_file, caption=mailing_text)
                    else:
                        await message.bot.send_audio(user.user_id, audio_file)

                elif mailing_text:
                    await message.bot.send_message(user.user_id, mailing_text, parse_mode='HTML',
                                                   disable_web_page_preview=True)

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫—É {user.user_id}: {e}")

    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º", reply_markup=kb.adm_back)
    await state.clear()


@rt.message(F.text == 'üéØ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
async def main_menu(message: Message, state: FSMContext):
    await rq.set_user(message.from_user.id, message.from_user.username)
    await message.answer('<strong>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ:</strong>',
                         parse_mode="HTML",
                         reply_markup=kb.M_menu)
    await state.clear()

##
@rt.callback_query(F.data == 'profile')
async def profile(callback: CallbackQuery):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()

        if user:
            remaining_days = user.subscription

            await callback.answer('üé® –ü—Ä–æ—Ñ–∏–ª—å')
            if remaining_days > 0 and user.subscription_type == 'gold':
                await callback.message.edit_text(
                    f"üé® –ü—Ä–æ—Ñ–∏–ª—å {callback.from_user.first_name}\n\n"
                    f"<strong>–ü–æ–¥–ø–∏—Å–∫–∞:</strong> ARTISTS + SPOT | GOLD üü° \n\n"
                    f"<strong>–î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:</strong> {remaining_days} –¥–Ω–µ–π\n",
                    parse_mode="HTML", reply_markup=kb.back)
            elif remaining_days > 0 and user.subscription_type == 'spot':
                await callback.message.edit_text(
                    f"üé® –ü—Ä–æ—Ñ–∏–ª—å {callback.from_user.first_name}\n\n"
                    f"<strong>–ü–æ–¥–ø–∏—Å–∫–∞:</strong> SPOT | BASIC ‚ö™Ô∏è \n\n"
                    f"<strong>–î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:</strong> {remaining_days} –¥–Ω–µ–π\n",
                    parse_mode="HTML", reply_markup=kb.col_swap)
            elif remaining_days > 0 and user.subscription_type == 'artists':
                await callback.message.edit_text(
                    f"üé® –ü—Ä–æ—Ñ–∏–ª—å {callback.from_user.first_name}\n\n"
                    f"<strong>–ü–æ–¥–ø–∏—Å–∫–∞:</strong> ARTISTS | BASIC ‚ö™Ô∏è \n\n"
                    f"<strong>–î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:</strong> {remaining_days} –¥–Ω–µ–π\n",
                    parse_mode="HTML", reply_markup=kb.col_swap)
            else:
                await callback.message.edit_text(
                    f'üé® –ü—Ä–æ—Ñ–∏–ª—å {callback.from_user.first_name}\n\n'
                    f'<strong>–ü–æ–¥–ø–∏—Å–∫–∞:</strong> –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞\n\n',
                    parse_mode="HTML", reply_markup=kb.subscription2)
        else:
            await callback.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /get_profile")

def is_time_allowed():
    moscow_tz = pytz.timezone('Europe/Moscow')
    now_moscow = datetime.now(moscow_tz).time()
    return now_moscow < datetime.strptime('18:00', '%H:%M').time() or now_moscow > datetime.strptime('19:00', '%H:%M').time()
@rt.callback_query(F.data == 'swap_sub')
async def swap_sub(callback: CallbackQuery):
    if not is_time_allowed():
        await callback.answer('‚ùóÔ∏è–ù–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Å 18:00 –¥–æ 19:00 –ú–°–ö', show_alert=True)
        return

    await callback.answer('üïπ –°–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É')
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user.subscription_type == 'spot':
            await callback.message.edit_text('<strong>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É —Å </strong>'
                                             '<strong><a href="https://telegra.ph/Podpiska-SPOT-03-16">SPOT</a> –Ω–∞ </strong>'
                                             '<strong><a href="https://telegra.ph/Podpiska-ARTISTS-03-16">ARTISTS</a>?</strong>\n\n'
                                             '<strong>‚ö† –ü—Ä–∏ —Å–º–µ–Ω–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤—ã –Ω–∞—á–Ω–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å 20 –∞—Ä—Ç–∏—Å—Ç–æ–≤ –≤–º–µ—Å—Ç–æ 5 SPOT-–∞–∫–∫–∞—É–Ω—Ç–æ–≤</strong>',
                                             reply_markup=kb.are_you_sure, parse_mode='HTML', disable_web_page_preview=True)
        elif user.subscription_type == 'artists':
            await callback.message.edit_text('<strong>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É —Å </strong>'
                                             '<strong><a href="https://telegra.ph/Podpiska-ARTISTS-03-16">ARTISTS</a> –Ω–∞ </strong>'
                                             '<strong><a href="https://telegra.ph/Podpiska-SPOT-03-16">SPOT</a>?</strong>\n\n'
                                             '<strong>‚ö† –ü—Ä–∏ —Å–º–µ–Ω–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤—ã –Ω–∞—á–Ω–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å 5 SPOT-–∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤–º–µ—Å—Ç–æ 20 –∞—Ä—Ç–∏—Å—Ç–æ–≤</strong>',
                                             reply_markup=kb.are_you_sure, parse_mode='HTML', disable_web_page_preview=True)
        else:
            await callback.message.edit_text('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', parse_mode='HTML', reply_markup=kb.back)
@rt.callback_query(F.data == 'user_yes')
async def user_yes(callback: CallbackQuery):
    if not is_time_allowed():
        await callback.answer('‚ùóÔ∏è–ù–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Å 18:00 –¥–æ 19:00 –ú–°–ö', show_alert=True)
        return

    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user.subscription_type == 'spot':
            user.subscription_type = 'artists'
            await callback.answer('‚úÖ –£—Å–ø–µ—à–Ω–æ')
            await callback.message.edit_text('<strong>‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ ARTISTS</strong>',
                                             reply_markup=kb.back_to_profile, parse_mode='HTML', disable_web_page_preview=True)
        elif user.subscription_type == 'artists':
            user.subscription_type = 'spot'
            await callback.answer('‚úÖ –£—Å–ø–µ—à–Ω–æ')
            await callback.message.edit_text('<strong>‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ SPOT</strong>',
                                             reply_markup=kb.back_to_profile, parse_mode='HTML', disable_web_page_preview=True)
        else:
            await callback.answer('error')
            await callback.message.edit_text('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', reply_markup=kb.back_to_profile)
        await session.commit()
@rt.callback_query(F.data == 'back_to_profile')
async def back_to_profile(callback: CallbackQuery, state: FSMContext):
    await callback.answer('üé® –í –ø—Ä–æ—Ñ–∏–ª—å')
    await state.clear()
    await profile(callback)
##

@rt.callback_query(F.data == 'm_back')
async def m_back(callback: CallbackQuery, state: FSMContext):
    await callback.answer('üéØ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    await state.clear()
    await callback.message.edit_text('<strong>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ:</strong>',
                                     parse_mode="HTML",
                                     reply_markup=kb.M_menu)
@rt.callback_query(F.data == 'back')
async def back(callback: CallbackQuery, state: FSMContext):
    await callback.answer('‚Ü©Ô∏è –ù–∞–∑–∞–¥')
    await state.clear()
    await callback.message.edit_text('<strong>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ:</strong>',
                                     parse_mode="HTML",
                                     reply_markup=kb.M_menu)
@rt.callback_query(F.data == 'back_p')
async def back_p(callback: CallbackQuery):
    await callback.answer('‚Ü©Ô∏è –ù–∞–∑–∞–¥')
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()

        if user:
            remaining_days = user.subscription

            await callback.answer('üé® –ü—Ä–æ—Ñ–∏–ª—å')
            if remaining_days > 0 and user.subscription_type == 'gold':
                await callback.message.edit_text(
                    f"üé® –ü—Ä–æ—Ñ–∏–ª—å {callback.from_user.first_name}\n\n"
                    f"<strong>–ü–æ–¥–ø–∏—Å–∫–∞:</strong>  ARTISTS + SPOT | GOLD üü°\n\n"
                    f"<strong>–î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:</strong> {remaining_days} –¥–Ω–µ–π\n",
                    parse_mode="HTML", reply_markup=kb.back)
            elif remaining_days > 0 and user.subscription_type == 'spot':
                await callback.message.edit_text(
                    f"üé® –ü—Ä–æ—Ñ–∏–ª—å {callback.from_user.first_name}\n\n"
                    f"<strong>–ü–æ–¥–ø–∏—Å–∫–∞:</strong> SPOT | BASIC ‚ö™Ô∏è \n\n"
                    f"<strong>–î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:</strong> {remaining_days} –¥–Ω–µ–π\n",
                    parse_mode="HTML", reply_markup=kb.col_swap)
            elif remaining_days > 0 and user.subscription_type == 'artists':
                await callback.message.edit_text(
                    f"üé® –ü—Ä–æ—Ñ–∏–ª—å {callback.from_user.first_name}\n\n"
                    f"<strong>–ü–æ–¥–ø–∏—Å–∫–∞:</strong> ARTISTS | BASIC ‚ö™Ô∏è \n\n"
                    f"<strong>–î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:</strong> {remaining_days} –¥–Ω–µ–π\n",
                    parse_mode="HTML", reply_markup=kb.col_swap)
            else:
                await callback.message.edit_text(
                    f'üé® –ü—Ä–æ—Ñ–∏–ª—å {callback.from_user.first_name}\n\n'
                    f'<strong>–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:</strong> –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞\n\n',
                    parse_mode="HTML", reply_markup=kb.subscription2)
        else:
            await callback.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /get_profile")
@rt.callback_query(F.data == 'back_c')
async def back_c(callback: CallbackQuery, state: FSMContext):
    await callback.answer('‚Ü©Ô∏è –ù–∞–∑–∞–¥')
    user_id = callback.from_user.id
    await show_collection(callback, state)
@rt.callback_query(F.data == 'col_back')
async def col_back(callback: CallbackQuery, state: FSMContext):
    await callback.answer('‚Ü©Ô∏è –ù–∞–∑–∞–¥')
    user_id = callback.from_user.id
    await state.clear()
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if not user.received_packs_spot or not user.received_packs:
            await callback.message.edit_text('<strong>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ:</strong>',reply_markup=kb.M_menu,
                                            parse_mode='HTML')
        else:
            await show_collection(callback, state)
@rt.callback_query(F.data == 'back_')
async def back_(callback: CallbackQuery):
    await callback.answer('‚Ü©Ô∏è –ù–∞–∑–∞–¥')
    await user_get_sub(callback)
@rt.callback_query(F.data == 'back_pr')
async def back_pr(callback: CallbackQuery):
    await callback.answer('‚Ü©Ô∏è –ù–∞–∑–∞–¥')
    await profile_p(callback)
@rt.callback_query(F.data == 'back_co')
async def back_co(callback: CallbackQuery):
    await callback.answer('‚Ü©Ô∏è –ù–∞–∑–∞–¥')
    await profile_c(callback)
@rt.callback_query(F.data == 'back_to_spot')
async def back_to_spot(callback: CallbackQuery, state: FSMContext):
    await callback.answer('‚Ü©Ô∏è –ù–∞–∑–∞–¥')
    await state.clear()
    await show_spot(callback, state)
@rt.callback_query(F.data == 'back_to_art')
async def back_to_art(callback: CallbackQuery, state: FSMContext):
    await callback.answer('‚Ü©Ô∏è –ù–∞–∑–∞–¥')
    await state.clear()
    await show_artists(callback, state)

##
@rt.callback_query(F.data =='collection')
async def show_collection(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    await callback.answer('üíæ –ö–æ–ª–ª–µ–∫—Ü–∏—è')
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if not user.received_packs_spot and user.received_packs:
            await show_artists(callback, state)
        if not user.received_packs and user.received_packs_spot:
            await show_spot(callback, state)
        if user.received_packs and user.received_packs_spot:
            await callback.message.edit_text('<strong>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ:</strong>', parse_mode='HTML', reply_markup=kb.spot_artists_col)
        if user.subscription <= 0:
            if not user.received_packs and not user.received_packs_spot:
                await callback.message.edit_text("<strong>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞!</strong>\n\n"
                                                 "–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –±–æ—Ç–∞",
                                                 parse_mode='HTML', reply_markup=kb.subscription3)
        if user.subscription > 0:
            if not user.received_packs and not user.received_packs_spot:
                await callback.message.edit_text("<strong>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞–∫–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞</strong>", parse_mode='HTML',reply_markup=kb.back)

@rt.callback_query(F.data == 'spot_col')
async def show_spot(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    print(f"Requesting user with user_id: {user_id}")

    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()

    if user is None:
        await callback.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=kb.back)
        return

    print(f"User ID: {user_id}, Subscription: {user.subscription}, Subscription Start: {user.subscription_start}")

    if user.subscription <= 0:
        if not user.received_packs_spot:
            await callback.message.edit_text("<strong>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞!</strong>\n\n"
                                             "–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –±–æ—Ç–∞",
                                             parse_mode='HTML',
                                             reply_markup=kb.subscription3)
            return

    if not user.subscription_start:
        await callback.message.edit_text("–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", reply_markup=kb.back)
        return

    print(f"Received packs for user: {user.received_packs_spot}")


    if not user.received_packs_spot:
        await callback.message.edit_text("<strong>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞–∫–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞</strong>", parse_mode='HTML',reply_markup=kb.back)
        return

    async with async_session() as session:
        result = await session.execute(
            select(SpotPack).filter(SpotPack.id.in_(user.received_packs_spot))
        )
        packs = result.scalars().all()

    if not packs:
        await callback.message.edit_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞–∫–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞", reply_markup=kb.back)
        return

    await state.update_data(current_page=1)

    await send_pack_page_spot(callback.message, user, 1, state)
async def send_pack_page_spot(message: Message, user: User, page: int, state: FSMContext):
    items_per_page = 1
    total_items = len(user.received_packs_spot)
    total_pages = get_total_pages(total_items, items_per_page)


    if total_pages == 0:
        await message.edit_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞–∫–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞", reply_markup=kb.back)
        return

    start_index = (page - 1) * items_per_page
    end_index = start_index + items_per_page
    page_packs = user.received_packs_spot[start_index:end_index]

    formatted_usernames = []

    for i, pack_id in enumerate(page_packs):
        async with async_session() as session:
            result = await session.execute(select(SpotPack).filter(SpotPack.id == pack_id))
            pack = result.scalar_one_or_none()
            if pack:
                usernames = pack.usernames.split(",")
                formatted_usernames.extend([
                    f"**{i + 1}.** {username.strip().replace('_', '\\_')} ([—Å—Å—ã–ª–∫–∞](https://www.instagram.com/{username.strip()}/))"
                    for i, username in enumerate(usernames)
                ])

    formatted_message = "\n".join(formatted_usernames)

    if formatted_message:
        await message.edit_text(
            f"{formatted_message}",
            parse_mode="Markdown",
            reply_markup=kb.database_navigation_sec_spot(page, total_pages)
        )


    await state.update_data(current_page=page)
async def send_pack_page_spot_2(message: Message, user: User, page: int, state: FSMContext):
    items_per_page = 1
    total_items = len(user.received_packs_spot)
    total_pages = get_total_pages(total_items, items_per_page)


    if total_pages == 0:
        await message.edit_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞–∫–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞", reply_markup=kb.back)
        return

    start_index = (page - 1) * items_per_page
    end_index = start_index + items_per_page
    page_packs = user.received_packs_spot[start_index:end_index]

    formatted_usernames = []

    for i, pack_id in enumerate(page_packs):
        async with async_session() as session:
            result = await session.execute(select(SpotPack).filter(SpotPack.id == pack_id))
            pack = result.scalar_one_or_none()
            if pack:
                usernames = pack.usernames.split(",")
                formatted_usernames.extend([
                    f"**{i + 1}.** {username.strip().replace('_', '\\_')} ([—Å—Å—ã–ª–∫–∞](https://www.instagram.com/{username.strip()}/))"
                    for i, username in enumerate(usernames)
                ])

    formatted_message = "\n".join(formatted_usernames)

    if formatted_message:
        await message.answer(
            f"{formatted_message}",
            parse_mode="Markdown",
            reply_markup=kb.database_navigation_sec_spot(page, total_pages)
        )

    await state.update_data(current_page=page)
@rt.callback_query(F.data.startswith("spotpag_"))
async def page_navigation_spot(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_page = data.get("current_page", 1)
    direction = callback.data.split("_")[1]

    async with async_session() as session:
        result = await session.execute(
            select(User).filter(User.user_id == callback.from_user.id)
        )
        user = result.scalar_one_or_none()

    if not user:
        await callback.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
        return

    total_items = len(user.received_packs_spot)
    total_pages = get_total_pages(total_items, 1)

    if direction == "nex":
        current_page = current_page + 1 if current_page < total_pages else 1
        await callback.answer('‚ùØ')
    elif direction == "pre":
        current_page = current_page - 1 if current_page > 1 else total_pages
        await callback.answer('‚ùÆ')

    await send_pack_page_spot(callback.message, user, current_page, state)
@rt.callback_query(F.data == "go_to_page_spot_col")
async def request_page_number_spot_col(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "<strong>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–π—Ç–∏:</strong>",
        reply_markup=kb.back_to_col_spot,
        parse_mode='HTML'
    )
    await state.set_state(UserState.enter_page_number_spot)
@rt.message(UserState.enter_page_number_spot)
async def go_to_page_spot(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if message.text.isdigit():
        page_number = int(message.text)

        async with async_session() as session:
            result = await session.execute(
                select(User).filter(User.user_id == user_id)
            )
            user = result.scalar_one_or_none()

        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=kb.back_to_col_spot)
            return

        total_items = len(user.received_packs_spot)
        total_pages = get_total_pages(total_items, 1)

        if 1 <= page_number <= total_pages:
            await state.update_data(current_page=page_number)
            await send_pack_page_spot_2(message, user, page_number, state)
        else:
            await message.answer(f"<strong>‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {total_pages}.</strong>",
                                 reply_markup=kb.back_to_col_spot,
                                 parse_mode="HTML")
    else:
        await message.answer("<strong>‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã.</strong>",
                             reply_markup=kb.back_to_col_spot,
                             parse_mode="HTML")


@rt.callback_query(F.data == "artists_col")
async def show_artists(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    print(f"Requesting user with user_id: {user_id}")

    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()

    if user is None:
        await callback.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=kb.back)
        return

    print(f"User ID: {user_id}, Subscription: {user.subscription}, Subscription Start: {user.subscription_start}")

    if user.subscription <= 0:
        if not user.received_packs:
            await callback.message.edit_text("<strong>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞!</strong>\n\n"
                                             "–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –±–æ—Ç–∞",
                                             parse_mode='HTML',
                                             reply_markup=kb.subscription3)
            return
    if not user.subscription_start:
        await callback.message.edit_text("–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", reply_markup=kb.back)
        return

    print(f"Received packs for user: {user.received_packs}")


    if not user.received_packs:
        await callback.message.edit_text("<strong>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞–∫–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞</strong>", parse_mode='HTML',reply_markup=kb.back)
        return

    async with async_session() as session:
        result = await session.execute(
            select(ArtistPack).filter(ArtistPack.id.in_(user.received_packs))
        )
        packs = result.scalars().all()

    if not packs:
        await callback.message.edit_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞–∫–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞", reply_markup=kb.back)
        return

    await state.update_data(current_page=1)

    await send_pack_page_artists(callback.message, user, 1, state)
async def send_pack_page_artists(message: Message, user: User, page: int, state: FSMContext):
    items_per_page = 1
    total_items = len(user.received_packs)
    total_pages = get_total_pages(total_items, items_per_page)


    if total_pages == 0:
        await message.edit_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞–∫–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞", reply_markup=kb.back)
        return

    start_index = (page - 1) * items_per_page
    end_index = start_index + items_per_page
    page_packs = user.received_packs[start_index:end_index]

    formatted_usernames = []

    for i, pack_id in enumerate(page_packs):
        async with async_session() as session:
            result = await session.execute(select(ArtistPack).filter(ArtistPack.id == pack_id))
            pack = result.scalar_one_or_none()
            if pack:
                usernames = pack.usernames.split(",")
                formatted_usernames.extend([
                    f"**{i + 1}.** {username.strip().replace('_', '\\_')} ([—Å—Å—ã–ª–∫–∞](https://www.instagram.com/{username.strip()}/))"
                    for i, username in enumerate(usernames)
                ])

    formatted_message = "\n".join(formatted_usernames)

    if formatted_message:
        await message.edit_text(
            f"{formatted_message}",
            parse_mode="Markdown",
            reply_markup=kb.database_navigation_sec(page, total_pages)
        )


    await state.update_data(current_page=page)
async def send_pack_page_artists_2(message: Message, user: User, page: int, state: FSMContext):
    items_per_page = 1
    total_items = len(user.received_packs)
    total_pages = get_total_pages(total_items, items_per_page)


    if total_pages == 0:
        await message.edit_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞–∫–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞", reply_markup=kb.back)
        return

    start_index = (page - 1) * items_per_page
    end_index = start_index + items_per_page
    page_packs = user.received_packs[start_index:end_index]

    formatted_usernames = []

    for i, pack_id in enumerate(page_packs):
        async with async_session() as session:
            result = await session.execute(select(ArtistPack).filter(ArtistPack.id == pack_id))
            pack = result.scalar_one_or_none()
            if pack:
                usernames = pack.usernames.split(",")
                formatted_usernames.extend([
                    f"**{i + 1}.** {username.strip().replace('_', '\\_')} ([—Å—Å—ã–ª–∫–∞](https://www.instagram.com/{username.strip()}/))"
                    for i, username in enumerate(usernames)
                ])

    formatted_message = "\n".join(formatted_usernames)

    if formatted_message:
        await message.answer(
            f"{formatted_message}",
            parse_mode="Markdown",
            reply_markup=kb.database_navigation_sec(page, total_pages)
        )


    await state.update_data(current_page=page)
@rt.callback_query(F.data.startswith("pag_"))
async def page_navigation(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_page = data.get("current_page", 1)
    direction = callback.data.split("_")[1]

    async with async_session() as session:
        result = await session.execute(
            select(User).filter(User.user_id == callback.from_user.id)
        )
        user = result.scalar_one_or_none()

    if not user:
        await callback.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
        return

    total_items = len(user.received_packs)
    total_pages = get_total_pages(total_items, 1)

    if direction == "nex":
        current_page = current_page + 1 if current_page < total_pages else 1
        await callback.answer('‚ùØ')
    elif direction == "pre":
        current_page = current_page - 1 if current_page > 1 else total_pages
        await callback.answer('‚ùÆ')

    await send_pack_page_artists(callback.message, user, current_page, state)
@rt.callback_query(F.data == "go_to_page_art_col")
async def request_page_number_art_col(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "<strong>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–π—Ç–∏:</strong>",
        reply_markup=kb.back_to_col_artists,
        parse_mode='HTML'
    )
    await state.set_state(UserState.enter_page_number_artists)
@rt.message(UserState.enter_page_number_artists)
async def go_to_page_art(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if message.text.isdigit():
        page_number = int(message.text)

        async with async_session() as session:
            result = await session.execute(
                select(User).filter(User.user_id == user_id)
            )
            user = result.scalar_one_or_none()

        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=kb.back_to_col_art)
            return

        total_items = len(user.received_packs)
        total_pages = get_total_pages(total_items, 1)

        if 1 <= page_number <= total_pages:
            await state.update_data(current_page=page_number)
            await send_pack_page_artists_2(message, user, page_number, state)
        else:
            await message.answer(f"<strong>‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {total_pages}.</strong>",
                                 reply_markup=kb.back_to_col_artists,
                                 parse_mode="HTML")
    else:
        await message.answer("<strong>‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã.</strong>",
                             reply_markup=kb.back_to_col_artists,
                             parse_mode="HTML")


@rt.callback_query(F.data == 'subscription')
async def user_get_sub(callback: CallbackQuery, page: int = 1, state: FSMContext = None):
    user_id = callback.from_user.id
    await callback.answer('üéü –ü–æ–¥–ø–∏—Å–∫–∞')
    if state:
        await state.clear()
    async with async_session() as session:
        user = await session.execute(select(User).where(User.user_id == user_id))
        user = user.scalars().first()

        discount_percentage = 0
        discount_gold = 0
        if user.active_promo_code:
            promo_info = await rq.get_promo_info(session, user.active_promo_code)

            if promo_info and promo_info.promo_type == "discount":
                if promo_info.subscription_type == 'basic':
                    discount_percentage = promo_info.promo_info_discount
                    discount_gold = 0
                elif promo_info.subscription_type == "gold":
                    discount_gold = promo_info.promo_info_discount
                    discount_percentage = 0
                elif promo_info.subscription_type == "basic+gold":
                    discount_gold = promo_info.promo_info_discount
                    discount_percentage = promo_info.promo_info_discount


    basic_premium_list = ['ARTISTS', 'SPOT', 'GOLD']
    total_pages = len(basic_premium_list)

    page = (page - 1) % total_pages + 1

    current_subscription = basic_premium_list[page - 1]
    if current_subscription == 'ARTISTS':
        base_price = 2000
        discounted_price = int(base_price * (1 - discount_percentage / 100))

        discount_expiration_info = (
            f" (–ø—Ä–æ–º–æ–∫–æ–¥ –¥–µ–π—Å—Ç–≤—É–µ—Ç –ø–æ {user.promo_expiration.strftime('%d.%m %H:%M')})"
            if user.active_promo_code and discount_percentage > 0 else ""
        )

        subscription_message = (
            f'–û—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –±–æ—Ç–∞.\n\n'
            f'<strong>–ü–æ–¥–ø–∏—Å–∫–∞: ARTISTS</strong>\n'
            f'<strong>–£—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏: BASIC ‚ö™Ô∏è</strong>\n\n'
            f'<strong>–°—Ç–æ–∏–º–æ—Å—Ç—å: {f"<s>{base_price}</s> " if discounted_price != base_price else ""}{discounted_price} —Ä—É–±./–º–µ—Å.</strong>'
            f'{discount_expiration_info}\n\n'  
            f'<strong>–ú–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã:</strong>\n'
            f'<strong>–°–±–µ—Ä–±–∞–Ω–∫:</strong> 2202208415908988\n'
            f'<strong>Telegram Wallet:</strong> @xxx\n\n'
            '‚ÑπÔ∏è –î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –ª—é–±—ã–º –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≤—ã—à–µ —Å–ø–æ—Å–æ–±–æ–≤. '
            '–ó–∞—Ç–µ–º –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ '
            '<a href="https://t.me/flowfind_support">–Ω–∞–º (–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ)</a> '
        )

        pagination_buttons = [
            InlineKeyboardButton(text="‚ùÆ", callback_data=f"sub_page_c_{(page - 2) % total_pages + 1}"),
            InlineKeyboardButton(text=f"{current_subscription}", url='https://telegra.ph/Podpiska-ARTISTS-03-16'),
            InlineKeyboardButton(text="‚ùØ", callback_data=f"sub_page_c_{page % total_pages + 1}")
        ]
    elif current_subscription == 'SPOT':
        base_price = 2000
        discounted_price = int(base_price * (1 - discount_percentage / 100))

        discount_expiration_info = (
            f" (–ø—Ä–æ–º–æ–∫–æ–¥ –¥–µ–π—Å—Ç–≤—É–µ—Ç –ø–æ {user.promo_expiration.strftime('%d.%m %H:%M')})"
            if user.active_promo_code and discount_percentage > 0 else ""
        )

        subscription_message = (
            f'–û—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –±–æ—Ç–∞.\n\n'
            f'<strong>–ü–æ–¥–ø–∏—Å–∫–∞: SPOT</strong>\n'
            f'<strong>–£—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏: BASIC ‚ö™Ô∏è</strong>\n\n'
            f'<strong>–°—Ç–æ–∏–º–æ—Å—Ç—å: {f"<s>{base_price}</s> " if discounted_price != base_price else ""}{discounted_price} —Ä—É–±./–º–µ—Å.</strong>'
            f'{discount_expiration_info}\n\n'
            f'<strong>–ú–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã:</strong>\n'
            f'<strong>–°–±–µ—Ä–±–∞–Ω–∫:</strong> 2202208415908988\n'
            f'<strong>Telegram Wallet:</strong> @xxx\n\n'
            '‚ÑπÔ∏è –î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –ª—é–±—ã–º –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≤—ã—à–µ —Å–ø–æ—Å–æ–±–æ–≤. '
            '–ó–∞—Ç–µ–º –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ '
            '<a href="https://t.me/flowfind_support">–Ω–∞–º (–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ)</a> '
        )

        pagination_buttons = [
            InlineKeyboardButton(text="‚ùÆ", callback_data=f"sub_page_c_{(page - 2) % total_pages + 1}"),
            InlineKeyboardButton(text=f"{current_subscription}", url='https://telegra.ph/Podpiska-SPOT-03-16'),
            InlineKeyboardButton(text="‚ùØ", callback_data=f"sub_page_c_{page % total_pages + 1}")
        ]
    else:
        base_price = 3000
        discounted_price = int(base_price * (1 - discount_gold / 100))

        discount_expiration_info = (
            f" (–ø—Ä–æ–º–æ–∫–æ–¥ –¥–µ–π—Å—Ç–≤—É–µ—Ç –ø–æ {user.promo_expiration.strftime('%d.%m %H:%M')})"
            if user.active_promo_code and discount_gold > 0 else ""
        )

        subscription_message = (
            f'–û—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –±–æ—Ç–∞.\n\n'
            f'<strong>–ü–æ–¥–ø–∏—Å–∫–∞: ARTISTS + SPOT</strong>\n'
            f'<strong>–£—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏: GOLD üü°</strong>\n\n'
            f'<strong>–°—Ç–æ–∏–º–æ—Å—Ç—å: {f"<s>{base_price}</s> " if discounted_price != base_price else ""}{discounted_price} —Ä—É–±./–º–µ—Å.</strong>'
            f'{discount_expiration_info}\n\n'
            f'<strong>–ú–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã:</strong>\n'
            f'<strong>–°–±–µ—Ä–±–∞–Ω–∫:</strong> 2202208415908988\n'
            f'<strong>Telegram Wallet:</strong> @xxx\n\n'
            '‚ÑπÔ∏è –î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –ª—é–±—ã–º –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≤—ã—à–µ —Å–ø–æ—Å–æ–±–æ–≤. '
            '–ó–∞—Ç–µ–º –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ '
            '<a href="https://t.me/flowfind_support">–Ω–∞–º (–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ)</a> '
        )

        pagination_buttons = [
            InlineKeyboardButton(text="‚ùÆ", callback_data=f"sub_page_c_{(page - 2) % total_pages + 1}"),
            InlineKeyboardButton(text=f"{current_subscription}", url='https://telegra.ph/Podpiska-ARTISTS--SPOT-03-16'),
            InlineKeyboardButton(text="‚ùØ", callback_data=f"sub_page_c_{page % total_pages + 1}")
        ]
    async with async_session() as session:
        user = await session.execute(select(User).where(User.user_id == user_id))
        user = user.scalars().first()
        if user.free_subscription_used == 0:
            buttons = [
                pagination_buttons,
                [InlineKeyboardButton(text="üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è", callback_data="free_subscription"),
                InlineKeyboardButton(text="üéü –û –ø–æ–¥–ø–∏—Å–∫–∞—Ö", url='https://telegra.ph/Podpiski--FlowFind-03-16')],
                [InlineKeyboardButton(text='üîç –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥', callback_data='promo_for_sub')],
                [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back")]
            ]
        else:
            buttons = [
                pagination_buttons,
                [InlineKeyboardButton(text="üéü –û –ø–æ–¥–ø–∏—Å–∫–∞—Ö", url='https://telegra.ph/Podpiski--FlowFind-03-16')],
                [InlineKeyboardButton(text='üîç –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥', callback_data='promo_for_sub')],
                [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back")]
            ]

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.edit_text(
        f"{subscription_message}",
        parse_mode="HTML", reply_markup=keyboard, disable_web_page_preview=True
    )
@rt.callback_query(F.data.startswith("sub_page_"))
async def change_subscription_page(callback: CallbackQuery):
    page = int(callback.data.split("_")[-1])
    await user_get_sub(callback, page)


@rt.callback_query(F.data == 'subscription_p')
async def profile_p(callback: CallbackQuery, page: int = 1):
    user_id = callback.from_user.id
    await callback.answer('üéü –ü–æ–¥–ø–∏—Å–∫–∞')
    async with async_session() as session:
        user = await session.execute(select(User).where(User.user_id == user_id))
        user = user.scalars().first()

        discount_percentage = 0
        discount_gold = 0
        if user.active_promo_code:
            promo_info = await rq.get_promo_info(session, user.active_promo_code)

            if promo_info and promo_info.promo_type == "discount":
                if promo_info.subscription_type == 'basic':
                    discount_percentage = promo_info.promo_info_discount
                    discount_gold = 0
                elif promo_info.subscription_type == "gold":
                    discount_gold = promo_info.promo_info_discount
                    discount_percentage = 0
                elif promo_info.subscription_type == "basic+gold":
                    discount_gold = promo_info.promo_info_discount
                    discount_percentage = promo_info.promo_info_discount

    basic_premium_list = ['ARTISTS', 'SPOT', 'GOLD']
    total_pages = len(basic_premium_list)

    page = (page - 1) % total_pages + 1

    current_subscription = basic_premium_list[page - 1]
    if current_subscription == 'ARTISTS':
        base_price = 2000
        discounted_price = int(base_price * (1 - discount_percentage / 100))

        discount_expiration_info = (
            f" (–ø—Ä–æ–º–æ–∫–æ–¥ –¥–µ–π—Å—Ç–≤—É–µ—Ç –ø–æ {user.promo_expiration.strftime('%d.%m %H:%M')})"
            if user.active_promo_code and discount_percentage > 0 else ""
        )

        subscription_message = (
            f'–û—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –±–æ—Ç–∞.\n\n'
            f'<strong>–ü–æ–¥–ø–∏—Å–∫–∞: ARTISTS</strong>\n'
            f'<strong>–£—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏: BASIC ‚ö™Ô∏è</strong>\n\n'
            f'<strong>–°—Ç–æ–∏–º–æ—Å—Ç—å: {f"<s>{base_price}</s> " if discounted_price != base_price else ""}{discounted_price} —Ä—É–±./–º–µ—Å.</strong>'
            f'{discount_expiration_info}\n\n'  
            f'<strong>–ú–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã:</strong>\n'
            f'<strong>–°–±–µ—Ä–±–∞–Ω–∫:</strong> 2202208415908988\n'
            f'<strong>Telegram Wallet:</strong> @xxx\n\n'
            '‚ÑπÔ∏è –î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –ª—é–±—ã–º –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≤—ã—à–µ —Å–ø–æ—Å–æ–±–æ–≤. '
            '–ó–∞—Ç–µ–º –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ '
            '<a href="https://t.me/flowfind_support">–Ω–∞–º (–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ)</a> '
        )

        pagination_buttons = [
            InlineKeyboardButton(text="‚ùÆ", callback_data=f"sub_page_c_{(page - 2) % total_pages + 1}"),
            InlineKeyboardButton(text=f"{current_subscription}", url='https://telegra.ph/Podpiska-ARTISTS-03-16'),
            InlineKeyboardButton(text="‚ùØ", callback_data=f"sub_page_c_{page % total_pages + 1}")
        ]
    elif current_subscription == 'SPOT':
        base_price = 2000
        discounted_price = int(base_price * (1 - discount_percentage / 100))

        discount_expiration_info = (
            f" (–ø—Ä–æ–º–æ–∫–æ–¥ –¥–µ–π—Å—Ç–≤—É–µ—Ç –ø–æ {user.promo_expiration.strftime('%d.%m %H:%M')})"
            if user.active_promo_code and discount_percentage > 0 else ""
        )

        subscription_message = (
            f'–û—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –±–æ—Ç–∞.\n\n'
            f'<strong>–ü–æ–¥–ø–∏—Å–∫–∞: SPOT</strong>\n'
            f'<strong>–£—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏: BASIC ‚ö™Ô∏è</strong>\n\n'
            f'<strong>–°—Ç–æ–∏–º–æ—Å—Ç—å: {f"<s>{base_price}</s> " if discounted_price != base_price else ""}{discounted_price} —Ä—É–±./–º–µ—Å.</strong>'
            f'{discount_expiration_info}\n\n'
            f'<strong>–ú–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã:</strong>\n'
            f'<strong>–°–±–µ—Ä–±–∞–Ω–∫:</strong> 2202208415908988\n'
            f'<strong>Telegram Wallet:</strong> @xxx\n\n'
            '‚ÑπÔ∏è –î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –ª—é–±—ã–º –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≤—ã—à–µ —Å–ø–æ—Å–æ–±–æ–≤. '
            '–ó–∞—Ç–µ–º –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ '
            '<a href="https://t.me/flowfind_support">–Ω–∞–º (–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ)</a> '
        )

        pagination_buttons = [
            InlineKeyboardButton(text="‚ùÆ", callback_data=f"sub_page_c_{(page - 2) % total_pages + 1}"),
            InlineKeyboardButton(text=f"{current_subscription}", url='https://telegra.ph/Podpiska-SPOT-03-16'),
            InlineKeyboardButton(text="‚ùØ", callback_data=f"sub_page_c_{page % total_pages + 1}")
        ]
    else:
        base_price = 3000
        discounted_price = int(base_price * (1 - discount_gold / 100))

        discount_expiration_info = (
            f" (–ø—Ä–æ–º–æ–∫–æ–¥ –¥–µ–π—Å—Ç–≤—É–µ—Ç –ø–æ {user.promo_expiration.strftime('%d.%m %H:%M')})"
            if user.active_promo_code and discount_gold > 0 else ""
        )

        subscription_message = (
            f'–û—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –±–æ—Ç–∞.\n\n'
            f'<strong>–ü–æ–¥–ø–∏—Å–∫–∞: ARTISTS + SPOT</strong>\n'
            f'<strong>–£—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏: GOLD üü°</strong>\n\n'
            f'<strong>–°—Ç–æ–∏–º–æ—Å—Ç—å: {f"<s>{base_price}</s> " if discounted_price != base_price else ""}{discounted_price} —Ä—É–±./–º–µ—Å.</strong>'
            f'{discount_expiration_info}\n\n'
            f'<strong>–ú–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã:</strong>\n'
            f'<strong>–°–±–µ—Ä–±–∞–Ω–∫:</strong> 2202208415908988\n'
            f'<strong>Telegram Wallet:</strong> @xxx\n\n'
            '‚ÑπÔ∏è –î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –ª—é–±—ã–º –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≤—ã—à–µ —Å–ø–æ—Å–æ–±–æ–≤. '
            '–ó–∞—Ç–µ–º –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ '
            '<a href="https://t.me/flowfind_support">–Ω–∞–º (–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ)</a> '
        )

        pagination_buttons = [
            InlineKeyboardButton(text="‚ùÆ", callback_data=f"sub_page_c_{(page - 2) % total_pages + 1}"),
            InlineKeyboardButton(text=f"{current_subscription}", url='https://telegra.ph/Podpiska-ARTISTS--SPOT-03-16'),
            InlineKeyboardButton(text="‚ùØ", callback_data=f"sub_page_c_{page % total_pages + 1}")
        ]
    async with async_session() as session:
        user = await session.execute(select(User).where(User.user_id == user_id))
        user = user.scalars().first()
        if user.free_subscription_used == 0:
            buttons = [
                pagination_buttons,
                [InlineKeyboardButton(text="üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è", callback_data="free_subscription"),
                 InlineKeyboardButton(text="üéü –û –ø–æ–¥–ø–∏—Å–∫–∞—Ö", url='https://telegra.ph/Podpiski--FlowFind-03-16')],
                [InlineKeyboardButton(text='üîç –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥', callback_data='promo_for_sub')],
                [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_p")]
            ]
        else:
            buttons = [
                pagination_buttons,
                [InlineKeyboardButton(text="üéü –û –ø–æ–¥–ø–∏—Å–∫–∞—Ö", url='https://telegra.ph/Podpiski--FlowFind-03-16')],
                [InlineKeyboardButton(text='üîç –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥', callback_data='promo_for_sub')],
                [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_p")]
            ]

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.edit_text(
        f"{subscription_message}",
        parse_mode="HTML", reply_markup=keyboard, disable_web_page_preview=True
    )
@rt.callback_query(F.data.startswith("sub_page_p_"))
async def change_subscription_page(callback: CallbackQuery):
    page = int(callback.data.split("_")[-1])
    await profile_p(callback, page)

@rt.callback_query(F.data == 'subscription_c')
async def profile_c(callback: CallbackQuery, page: int = 1):
    user_id = callback.from_user.id
    await callback.answer('üéü –ü–æ–¥–ø–∏—Å–∫–∞')
    async with async_session() as session:
        user = await session.execute(select(User).where(User.user_id == user_id))
        user = user.scalars().first()

        discount_percentage = 0
        discount_gold = 0
        if user.active_promo_code:
            promo_info = await rq.get_promo_info(session, user.active_promo_code)

            if promo_info and promo_info.promo_type == "discount":
                if promo_info.subscription_type == 'basic':
                    discount_percentage = promo_info.promo_info_discount
                    discount_gold = 0
                elif promo_info.subscription_type == "gold":
                    discount_gold = promo_info.promo_info_discount
                    discount_percentage = 0
                elif promo_info.subscription_type == "basic+gold":
                    discount_gold = promo_info.promo_info_discount
                    discount_percentage = promo_info.promo_info_discount

    basic_premium_list = ['ARTISTS', 'SPOT', 'GOLD']
    total_pages = len(basic_premium_list)

    page = (page - 1) % total_pages + 1

    current_subscription = basic_premium_list[page - 1]
    if current_subscription == 'ARTISTS':
        base_price = 2000
        discounted_price = int(base_price * (1 - discount_percentage / 100))

        discount_expiration_info = (
            f" (–ø—Ä–æ–º–æ–∫–æ–¥ –¥–µ–π—Å—Ç–≤—É–µ—Ç –ø–æ {user.promo_expiration.strftime('%d.%m %H:%M')})"
            if user.active_promo_code and discount_percentage > 0 else ""
        )

        subscription_message = (
            f'–û—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –±–æ—Ç–∞.\n\n'
            f'<strong>–ü–æ–¥–ø–∏—Å–∫–∞: ARTISTS</strong>\n'
            f'<strong>–£—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏: BASIC ‚ö™Ô∏è</strong>\n\n'
            f'<strong>–°—Ç–æ–∏–º–æ—Å—Ç—å: {f"<s>{base_price}</s> " if discounted_price != base_price else ""}{discounted_price} —Ä—É–±./–º–µ—Å.</strong>'
            f'{discount_expiration_info}\n\n'  
            f'<strong>–ú–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã:</strong>\n'
            f'<strong>–°–±–µ—Ä–±–∞–Ω–∫:</strong> 2202208415908988\n'
            f'<strong>Telegram Wallet:</strong> @xxx\n\n'
            '‚ÑπÔ∏è –î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –ª—é–±—ã–º –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≤—ã—à–µ —Å–ø–æ—Å–æ–±–æ–≤. '
            '–ó–∞—Ç–µ–º –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ '
            '<a href="https://t.me/flowfind_support">–Ω–∞–º (–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ)</a> '
        )

        pagination_buttons = [
            InlineKeyboardButton(text="‚ùÆ", callback_data=f"sub_page_c_{(page - 2) % total_pages + 1}"),
            InlineKeyboardButton(text=f"{current_subscription}", url='https://telegra.ph/Podpiska-ARTISTS-03-16'),
            InlineKeyboardButton(text="‚ùØ", callback_data=f"sub_page_c_{page % total_pages + 1}")
        ]
    elif current_subscription == 'SPOT':
        base_price = 2000
        discounted_price = int(base_price * (1 - discount_percentage / 100))

        discount_expiration_info = (
            f" (–ø—Ä–æ–º–æ–∫–æ–¥ –¥–µ–π—Å—Ç–≤—É–µ—Ç –ø–æ {user.promo_expiration.strftime('%d.%m %H:%M')})"
            if user.active_promo_code and discount_percentage > 0 else ""
        )

        subscription_message = (
            f'–û—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –±–æ—Ç–∞.\n\n'
            f'<strong>–ü–æ–¥–ø–∏—Å–∫–∞: SPOT</strong>\n'
            f'<strong>–£—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏: BASIC ‚ö™Ô∏è</strong>\n\n'
            f'<strong>–°—Ç–æ–∏–º–æ—Å—Ç—å: {f"<s>{base_price}</s> " if discounted_price != base_price else ""}{discounted_price} —Ä—É–±./–º–µ—Å.</strong>'
            f'{discount_expiration_info}\n\n'
            f'<strong>–ú–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã:</strong>\n'
            f'<strong>–°–±–µ—Ä–±–∞–Ω–∫:</strong> 2202208415908988\n'
            f'<strong>Telegram Wallet:</strong> @xxx\n\n'
            '‚ÑπÔ∏è –î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –ª—é–±—ã–º –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≤—ã—à–µ —Å–ø–æ—Å–æ–±–æ–≤. '
            '–ó–∞—Ç–µ–º –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ '
            '<a href="https://t.me/flowfind_support">–Ω–∞–º (–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ)</a> '
        )

        pagination_buttons = [
            InlineKeyboardButton(text="‚ùÆ", callback_data=f"sub_page_c_{(page - 2) % total_pages + 1}"),
            InlineKeyboardButton(text=f"{current_subscription}", url='https://telegra.ph/Podpiska-SPOT-03-16'),
            InlineKeyboardButton(text="‚ùØ", callback_data=f"sub_page_c_{page % total_pages + 1}")
        ]
    else:
        base_price = 3000
        discounted_price = int(base_price * (1 - discount_gold / 100))

        discount_expiration_info = (
            f" (–ø—Ä–æ–º–æ–∫–æ–¥ –¥–µ–π—Å—Ç–≤—É–µ—Ç –ø–æ {user.promo_expiration.strftime('%d.%m %H:%M')})"
            if user.active_promo_code and discount_gold > 0 else ""
        )

        subscription_message = (
            f'–û—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –±–æ—Ç–∞.\n\n'
            f'<strong>–ü–æ–¥–ø–∏—Å–∫–∞: ARTISTS + SPOT</strong>\n'
            f'<strong>–£—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏: GOLD üü°</strong>\n\n'
            f'<strong>–°—Ç–æ–∏–º–æ—Å—Ç—å: {f"<s>{base_price}</s> " if discounted_price != base_price else ""}{discounted_price} —Ä—É–±./–º–µ—Å.</strong>'
            f'{discount_expiration_info}\n\n'
            f'<strong>–ú–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã:</strong>\n'
            f'<strong>–°–±–µ—Ä–±–∞–Ω–∫:</strong> 2202208415908988\n'
            f'<strong>Telegram Wallet:</strong> @xxx\n\n'
            '‚ÑπÔ∏è –î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –ª—é–±—ã–º –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≤—ã—à–µ —Å–ø–æ—Å–æ–±–æ–≤. '
            '–ó–∞—Ç–µ–º –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ '
            '<a href="https://t.me/flowfind_support">–Ω–∞–º (–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ)</a> '
        )

        pagination_buttons = [
            InlineKeyboardButton(text="‚ùÆ", callback_data=f"sub_page_c_{(page - 2) % total_pages + 1}"),
            InlineKeyboardButton(text=f"{current_subscription}", url='https://telegra.ph/Podpiska-ARTISTS--SPOT-03-16'),
            InlineKeyboardButton(text="‚ùØ", callback_data=f"sub_page_c_{page % total_pages + 1}")
        ]

    async with async_session() as session:
        user = await session.execute(select(User).where(User.user_id == user_id))
        user = user.scalars().first()
        if user.free_subscription_used == 0:
            buttons = [
                pagination_buttons,
                [InlineKeyboardButton(text="üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è", callback_data="free_subscription"),
                 InlineKeyboardButton(text="üéü –û –ø–æ–¥–ø–∏—Å–∫–∞—Ö", url='https://telegra.ph/Podpiski--FlowFind-03-16')],
                [InlineKeyboardButton(text='üîç –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥', callback_data='promo_for_sub')],
                [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_c")]
            ]
        else:
            buttons = [
                pagination_buttons,
                [InlineKeyboardButton(text="üéü –û –ø–æ–¥–ø–∏—Å–∫–∞—Ö", url='https://telegra.ph/Podpiski--FlowFind-03-16')],
                [InlineKeyboardButton(text='üîç –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥', callback_data='promo_for_sub')],
                [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_c")]
            ]

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.edit_text(
        f"{subscription_message}",
        parse_mode="HTML", reply_markup=keyboard, disable_web_page_preview=True
    )
@rt.callback_query(F.data.startswith("sub_page_c_"))
async def change_subscription_page(callback: CallbackQuery):
    page = int(callback.data.split("_")[-1])
    await profile_c(callback, page)
##

@rt.message(F.text == 'üë• –ü–æ–¥–¥–µ—Ä–∂–∫–∞')
async def main_support(message: Message):
    await message.answer('<strong>ü´Ç –ü–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –∂–¥–µ–º –≤–∞—Å: @flowfind_support</strong>',
                         parse_mode="HTML",
                         reply_markup=kb.backtomenu)


@rt.message(Command("restart"))
async def restart(message: Message):
    await cmd_start(message)

@rt.message(Command("get_profile"))
async def restart(message: Message):
    await cmd_start(message)


async def is_subscribed_to_channels(user_id: int, channel_1: str, bot: Bot) -> bool:
    try:
        chat_member_1 = await bot.get_chat_member(channel_1, user_id)

        print(f"User {user_id} status in {channel_1}: {chat_member_1.status}")

        statuses = ["member", "administrator", "creator"]
        return chat_member_1.status in statuses
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

@rt.callback_query(F.data=='free_subscription')
async def process_free_subscription(callback: CallbackQuery):
    await callback.answer('üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞')
    await callback.message.edit_text('<strong>ü´∑üèª–ë–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É <a href="https://telegra.ph/Podpiska-ARTISTS--SPOT-03-16">GOLD</a> –º–æ–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑! </strong>\n'
                                     '–û–Ω–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç 3 –¥–Ω—è –∏ –Ω–µ –ø–æ–¥–ª–µ–∂–∏—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–µ.\n\n'
                                     '<strong>–£—Å–ª–æ–≤–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è:</strong>\n'
                                     '1. –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª @formantsales\n'
                                     '2. –ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É <strong>¬´–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å¬ª</strong>\n\n'
                                     '–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –¥–æ—Å—Ç—É–ø –±—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.',
                                     parse_mode="HTML",reply_markup=kb.get_free_subscription_button_completed(), disable_web_page_preview=True)
@rt.callback_query(F.data=='free_subscription_p')
async def process_free_subscription_p(callback: CallbackQuery):
    await callback.answer('üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞')
    await callback.message.edit_text('<strong>ü´∑üèª–ë–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É <a href="https://telegra.ph/Podpiska-ARTISTS--SPOT-03-16">GOLD</a> –º–æ–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑! </strong>\n'
                                     '–û–Ω–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç 3 –¥–Ω—è –∏ –Ω–µ –ø–æ–¥–ª–µ–∂–∏—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–µ.\n\n'
                                     '<strong>–£—Å–ª–æ–≤–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è:</strong>\n'
                                     '1. –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª @formantsales\n'
                                     '2. –ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É <strong>¬´–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å¬ª</strong>\n\n'
                                     '–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –¥–æ—Å—Ç—É–ø –±—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.',
                                     parse_mode="HTML", reply_markup=kb.get_free_subscription_button_completed_p(), disable_web_page_preview=True)
@rt.callback_query(F.data=='free_subscription_c')
async def process_free_subscription(callback: CallbackQuery):
    await callback.message.edit_text('<strong>ü´∑üèª–ë–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É <a href="https://telegra.ph/Podpiska-ARTISTS--SPOT-03-16">GOLD</a> –º–æ–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑! </strong>\n'
                                     '–û–Ω–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç 3 –¥–Ω—è –∏ –Ω–µ –ø–æ–¥–ª–µ–∂–∏—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–µ.\n\n'
                                     '<strong>–£—Å–ª–æ–≤–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è:</strong>\n'
                                     '1. –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª @formantsales\n'
                                     '2. –ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É <strong>¬´–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å¬ª</strong>\n\n'
                                     '–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –¥–æ—Å—Ç—É–ø –±—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.',
                                     parse_mode="HTML", reply_markup=kb.get_free_subscription_button_completed_c(), disable_web_page_preview=True)
@rt.callback_query(F.data=='free_subscription_completed')
async def process_free_subscription(callback: CallbackQuery):
    if callback.data == "free_subscription_completed":
        user_id = callback.from_user.id
        channel_1 = "@formantsales"

    if await is_subscribed_to_channels(user_id, channel_1, callback.message.bot):
        async with async_session() as session:
            user = await session.execute(select(User).where(User.user_id == user_id))
            user = user.scalars().first()
            if user.paid_sub == 1 and user.subscription > 0:
                await callback.answer("–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ", show_alert=True)
                return
            if user and not user.free_subscription_used and user.subscription == 0:
                now = datetime.now(pytz.timezone('Europe/Moscow'))
                user.subscription += 3
                user.subscription_start = now
                user.free_subscription_used = True
                user.subscription_type = 'gold'

                session.add(user)
                await session.commit()

                await callback.answer("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 3 –¥–Ω—è!")

                user_id = callback.from_user.id
                async with async_session() as session:
                    result = await session.execute(select(User).filter(User.user_id == user_id))
                    user = result.scalar_one_or_none()

                    if user:
                        remaining_days = user.subscription

                        await profile(callback)
                    else:
                        await callback.answer(
                            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /get_profile")
            else:
                await callback.answer("–í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É", show_alert=True)
    else:
        await callback.answer(
            '–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —É—Å–ª–æ–≤–∏—è', show_alert=True)
@rt.callback_query(F.data=='free_subscription_completed_pr')
async def process_free_subscription_pr(callback: CallbackQuery):
    if callback.data == "free_subscription_completed_pr":
        user_id = callback.from_user.id
        channel_1 = "@formantsales"

    if await is_subscribed_to_channels(user_id, channel_1, callback.message.bot):
        async with async_session() as session:
            user = await session.execute(select(User).where(User.user_id == user_id))
            user = user.scalars().first()
            if user.paid_sub == 1 and user.subscription > 0:
                await callback.answer("–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ", show_alert=True)
                return
            if user and not user.free_subscription_used and user.subscription == 0:
                now = datetime.now(pytz.timezone('Europe/Moscow'))
                user.subscription += 3
                user.subscription_start = now
                user.free_subscription_used = True
                user.subscription_type = 'gold'

                session.add(user)
                await session.commit()

                await callback.answer("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 3 –¥–Ω—è!")

                user_id = callback.from_user.id
                async with async_session() as session:
                    result = await session.execute(select(User).filter(User.user_id == user_id))
                    user = result.scalar_one_or_none()

                    if user:
                        remaining_days = user.subscription


                        await profile(callback)
                    else:
                        await callback.answer(
                            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /get_profile")
            else:
                await callback.answer("–í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É", show_alert=True)
    else:
        await callback.answer(
            '–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —É—Å–ª–æ–≤–∏—è', show_alert=True)
@rt.callback_query(F.data=='free_subscription_completed_co')
async def process_free_subscription_co(callback: CallbackQuery):
    if callback.data == "free_subscription_completed_co":
        user_id = callback.from_user.id
        channel_1 = "@formantsales"

        if await is_subscribed_to_channels(user_id, channel_1, callback.message.bot):
            async with async_session() as session:
                user = await session.execute(select(User).where(User.user_id == user_id))
                user = user.scalars().first()
                if user.paid_sub == 1 and user.subscription > 0:
                    await callback.answer("–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ", show_alert=True)
                    return
                if user and not user.free_subscription_used and user.subscription == 0:
                    now = datetime.now(pytz.timezone('Europe/Moscow'))
                    user.subscription += 3
                    user.subscription_start = now
                    user.free_subscription_used = True
                    user.subscription_type = 'gold'

                    session.add(user)
                    await session.commit()

                    await callback.answer("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 3 –¥–Ω—è!")

                    user_id = callback.from_user.id
                    async with async_session() as session:
                        result = await session.execute(select(User).filter(User.user_id == user_id))
                        user = result.scalar_one_or_none()

                        if user:
                            remaining_days = user.subscription

                            await profile(callback)
                        else:
                            await callback.answer(
                                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /get_profile")
                else:
                    await callback.answer("<strong>ü´∑üèª–ë–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É ¬´GOLD¬ª –º–æ–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑!</strong> –û–Ω–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç 3 –¥–Ω—è –∏ –Ω–µ –ø–æ–¥–ª–µ–∂–∏—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–µ.",show_alert=True)
        else:
            await callback.answer(
                '–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —É—Å–ª–æ–≤–∏—è', show_alert=True)

