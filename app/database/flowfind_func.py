from aiogram import F, Router
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from sqlalchemy.future import select
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
import re
import logging

from config import ADMIN_ID
import app.keyboards as kb
from app.database.models import ArtistPack, User, SpotPack
from app.database.requests import async_session

rt = Router()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def is_admin(user_id):
    return user_id in ADMIN_ID

class FlowFindStates(StatesGroup):
    waiting_for_usernames = State()
    confirm_submission = State()
    editing_page = State()
    enter_page_number = State()
class SpotStates(StatesGroup):
    waiting_for_usernames = State()
    confirm_submission = State()
    editing_page = State()
    enter_page_number = State()


@rt.callback_query(F.data == "add")
async def start_add(callback: CallbackQuery, state: FSMContext):
    await state.set_state(FlowFindStates.waiting_for_usernames)
    await callback.answer('üì≤ ADD')
    await callback.message.edit_text(
        "<strong>–í–≤–µ–¥–∏—Ç–µ 20 username-–æ–≤ –∞—Ä—Ç–∏—Å—Ç–æ–≤, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:</strong>",
        reply_markup=kb.adm_back, parse_mode='HTML'
    )

valid_username_pattern = re.compile(r'^[a-zA-Z0-9._-]+$')

@rt.message(FlowFindStates.waiting_for_usernames)
async def process_usernames(message: Message, state: FSMContext):
    usernames = message.text.strip().split("\n")

    if len(usernames) != 20:
        error_buttons = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='adm_back')]
        ])
        await message.answer(
            f"<strong>‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ ‚Äî {len(usernames)}</strong>",
            reply_markup=error_buttons, parse_mode='HTML'
        )
        return

    invalid_usernames = [username for username in usernames if not valid_username_pattern.match(username.strip())]

    if invalid_usernames:
        await message.answer(
            f"<strong>‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ username-—ã: {', '.join(invalid_usernames)}</strong>\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–∞–∂–¥—ã–π username —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤, —Ü–∏—Ñ—Ä, —Ç–æ—á–µ–∫ –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–π",
            reply_markup=kb.adm_back, parse_mode='HTML'
        )
        return

    duplicate_usernames = [username for username in usernames if usernames.count(username) > 1]
    if duplicate_usernames:
        await message.answer(
            f"<strong>‚ö†Ô∏è –í –ø–∞–∫–µ –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è —é–∑–µ—Ä–Ω–µ–π–º—ã: {', '.join(set(duplicate_usernames))}</strong>\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–¥–∞–ª–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —é–∑–µ—Ä–Ω–µ–π–º—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=kb.adm_back, parse_mode='HTML'
        )
        return

    async with async_session() as session:
        result = await session.execute(select(ArtistPack.usernames))
        existing_usernames = result.scalars().all()

    existing_usernames = [username.strip() for usernames in existing_usernames for username in usernames.split(",")]

    duplicate_usernames_in_db = [username for username in usernames if username.strip() in existing_usernames]

    if duplicate_usernames_in_db:
        await message.answer(
            f"<strong>‚ö†Ô∏è –ê—Ä—Ç–∏—Å—Ç —Å —é–∑–µ—Ä–Ω–µ–π–º–æ–º(–∞–º–∏) {', '.join(duplicate_usernames_in_db)} —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É</strong>",
            reply_markup=kb.adm_back, parse_mode='HTML'
        )
        return

    formatted_usernames = [
        f"**{i + 1}.** {username.strip().replace('_', '\\_')} ([—Å—Å—ã–ª–∫–∞](https://www.instagram.com/{username.strip()}/))"
        for i, username in enumerate(usernames)
    ]

    formatted_message = "\n".join(formatted_usernames)
    await state.update_data(usernames=usernames)

    await state.set_state(FlowFindStates.confirm_submission)
    await message.answer(
        f"**–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ!**\n\n{formatted_message}",
        parse_mode="Markdown",
        reply_markup=kb.confirmation_buttons, disable_web_page_preview=True
    )

@rt.callback_query(F.data == "confirm")
async def confirm_submission(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    usernames = data.get("usernames", [])

    async with async_session() as session:
        pack = ArtistPack(usernames=",".join(usernames))
        session.add(pack)
        await session.commit()
    await callback.answer('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å')
    await callback.message.edit_text(
        "<strong>‚úÖ –ü–∞–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–∞—Å—Å—ã–ª–∫—É</strong>",
        reply_markup=kb.adm_start, parse_mode='HTML'
    )
    await state.clear()

@rt.callback_query(F.data == "edit")
async def edit_submission(callback: CallbackQuery, state: FSMContext):
    await state.set_state(FlowFindStates.waiting_for_usernames)
    await callback.answer('üîß –ò–∑–º–µ–Ω–∏—Ç—å')
    await callback.message.edit_text(
        "<strong>–í–≤–µ–¥–∏—Ç–µ 20 username-–æ–≤ –∞—Ä—Ç–∏—Å—Ç–æ–≤, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:</strong>",
        reply_markup=kb.adm_back, parse_mode='HTML'
    )

@rt.callback_query(F.data == "decline")
async def decline_submission(callback: CallbackQuery, state: FSMContext):
    await callback.answer('üóë –û—Ç–∫–ª–æ–Ω–∏—Ç—å')
    await callback.message.edit_text(
        "<strong>üóë –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.</strong>",
        reply_markup=kb.adm_start, parse_mode='HTML'
    )
    await state.clear()



@rt.callback_query(F.data == "database")
async def show_database(callback: CallbackQuery, state: FSMContext):
    async with async_session() as session:
        result = await session.execute(select(ArtistPack).order_by(ArtistPack.id))
        packs = result.scalars().all()
    await callback.answer('üìÅ DATABASE')
    if not packs:
        await callback.message.edit_text(
            "<strong>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞</strong>",
            reply_markup=kb.adm_back,
            parse_mode='HTML'
        )
        return

    await state.update_data(current_page=1)
    await send_pack_page(callback.message, packs, 1)

async def send_pack_page(message: Message, packs: list, page: int):
    pack = packs[page - 1]
    usernames = pack.usernames.split(",")

    formatted_usernames = [
        f"**{i + 1}.** {username.strip().replace('_', '\\_')} ([—Å—Å—ã–ª–∫–∞](https://www.instagram.com/{username.strip()}/))"
        for i, username in enumerate(usernames)
    ]

    formatted_message = "\n".join(formatted_usernames)
    total_pages = len(packs)

    try:
        await message.edit_text(
            f"{formatted_message}",
            parse_mode="Markdown",
            reply_markup=kb.database_navigation(page, total_pages), disable_web_page_preview=True
        )
    except Exception:
        await message.answer(
            f"{formatted_message}",
            parse_mode="Markdown",
            reply_markup=kb.database_navigation(page, total_pages), disable_web_page_preview=True
        )

@rt.callback_query(F.data.startswith("page_"))
async def change_page(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_page = data.get("current_page", 1)

    direction = callback.data.split("_")[1]
    async with async_session() as session:
        result = await session.execute(select(ArtistPack).order_by(ArtistPack.id))
        packs = result.scalars().all()

    if direction == "next" and current_page < len(packs):
        current_page += 1
        await callback.answer('‚ùØ')
    elif direction == "prev" and current_page > 1:
        await callback.answer('‚ùÆ')
        current_page -= 1
    else:
        await callback.answer('–ù–µ –≤—ã—Ö–æ–¥–∏ –∑–∞ —Ä–∞–º–∫–∏')
        return

    await state.update_data(current_page=current_page)
    await send_pack_page(callback.message, packs, current_page)

@rt.callback_query(F.data == "go_to_page")
async def request_page_number(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "<strong>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–π—Ç–∏:</strong>",
        reply_markup=kb.adm_back,
        parse_mode='HTML'
    )
    await state.set_state(FlowFindStates.enter_page_number)

@rt.message(FlowFindStates.enter_page_number)
async def go_to_page(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if not is_admin(user_id):
        return

    async with async_session() as session:
        if message.text.isdigit():
            page_number = int(message.text)
            result = await session.execute(select(ArtistPack).order_by(ArtistPack.id))
            packs = result.scalars().all()
            total_pages = len(packs)

            if 1 <= page_number <= total_pages:
                await state.update_data(current_page=page_number)
                await send_pack_page(message, packs, page_number)
            else:
                await message.answer(f"<strong>‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {total_pages}</strong>",
                                     reply_markup=kb.adm_back,
                                     parse_mode="HTML")
        else:
            result = await session.execute(select(ArtistPack).order_by(ArtistPack.id))
            packs = result.scalars().all()

            pack = next((p for p in packs if message.text.lower() in p.usernames.lower()), None)

            if pack:
                page_number = packs.index(pack) + 1  
                await state.update_data(current_page=page_number)
                await send_pack_page(message, packs, page_number)
            else:
                await message.answer("‚ö†Ô∏è –ü–∞–∫ —Å —Ç–∞–∫–∏–º —é–∑–µ—Ä–Ω–µ–π–º–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                                     reply_markup=kb.adm_back,
                                     parse_mode="HTML")

@rt.callback_query(F.data == "delete_pack")
async def delete_pack(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_page = data.get("current_page", 1)
    await callback.answer('üóë –£–¥–∞–ª–∏—Ç—å')
    async with async_session() as session:
        result = await session.execute(select(ArtistPack).order_by(ArtistPack.id))
        packs = result.scalars().all()

        if not packs:
            await callback.message.edit_text(
                "<strong>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞</strong>",
                reply_markup=kb.adm_back, parse_mode='HTML'
            )
            return

        pack_to_delete = packs[current_page - 1]
        pack_id = pack_to_delete.id

        users = await session.execute(select(User))
        users = users.scalars().all()
        for user in users:
            if pack_id in user.received_packs:
                user.received_packs.remove(pack_id)

        await session.delete(pack_to_delete)
        await session.commit()

    await callback.message.edit_text(
        f"<strong>üóë –ü–∞–∫ ‚Ññ{pack_to_delete.id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω</strong>",
        reply_markup=kb.adm_back, parse_mode='HTML'
    )

@rt.callback_query(F.data == "edit_pack")
async def edit_pack(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_page = data.get("current_page", 1)
    async with async_session() as session:
        result = await session.execute(select(ArtistPack).order_by(ArtistPack.id))
        packs = result.scalars().all()

        if current_page > len(packs):
            await callback.message.edit_text(
                "<strong>–û—à–∏–±–∫–∞: –ü–∞–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞</strong>",
                reply_markup=kb.adm_back, parse_mode='HTML'
            )
            return

        pack_to_edit = packs[current_page - 1]

        await state.update_data(pack_to_edit_id=pack_to_edit.id)

    await state.set_state(FlowFindStates.editing_page)
    await callback.answer('üîß –ò–∑–º–µ–Ω–∏—Ç—å')
    await callback.message.edit_text(
        "<strong>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ username-–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–∞–∫–∞ (20 —Å—Ç—Ä–æ–∫):</strong>",
        reply_markup=kb.adm_back, parse_mode='HTML'
    )

@rt.message(FlowFindStates.editing_page)
async def process_edit_pack(message: Message, state: FSMContext):
    usernames = [u.strip().lower() for u in message.text.strip().splitlines()]

    if len(usernames) != 20:
        await message.answer(
            f"<strong>‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ ‚Äî {len(usernames)}. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ–≤–Ω–æ 20. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:</strong>",
            reply_markup=kb.adm_back, parse_mode='HTML'
        )
        return

    invalid_usernames = [u for u in usernames if not valid_username_pattern.match(u)]
    if invalid_usernames:
        await message.answer(
            f"<strong>‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ username-—ã: {', '.join(invalid_usernames)}</strong>\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–∞–∂–¥—ã–π username —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤, —Ü–∏—Ñ—Ä, —Ç–æ—á–µ–∫ –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–π",
            reply_markup=kb.adm_back, parse_mode='HTML'
        )
        return

    duplicate_usernames = [u for u in usernames if usernames.count(u) > 1]
    if duplicate_usernames:
        await message.answer(
            f"<strong>‚ö†Ô∏è –í –ø–∞–∫–µ –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è —é–∑–µ—Ä–Ω–µ–π–º—ã: {', '.join(set(duplicate_usernames))}</strong>\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–¥–∞–ª–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —é–∑–µ—Ä–Ω–µ–π–º—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=kb.adm_back, parse_mode='HTML'
        )
        return

    data = await state.get_data()
    current_page = data.get("current_page", 1)

    async with async_session() as session:
        result = await session.execute(select(ArtistPack).order_by(ArtistPack.id))
        packs = result.scalars().all()

        if current_page > len(packs):
            await message.answer(
                "<strong>–û—à–∏–±–∫–∞: –ü–∞–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞</strong>",
                reply_markup=kb.adm_back, parse_mode='HTML'
            )
            return

        pack_to_edit = packs[current_page - 1]

        result = await session.execute(
            select(ArtistPack.usernames).where(ArtistPack.id != pack_to_edit.id)
        )
        other_usernames_raw = result.scalars().all()
        existing_usernames = {
            u.strip().lower()
            for usernames in other_usernames_raw
            for u in usernames.split(",")
        }

        duplicate_usernames_in_db = [u for u in usernames if u in existing_usernames]
        if duplicate_usernames_in_db:
            await message.answer(
                f"<strong>‚ö†Ô∏è –ê—Ä—Ç–∏—Å—Ç —Å —é–∑–µ—Ä–Ω–µ–π–º–æ–º(–∞–º–∏) {', '.join(duplicate_usernames_in_db)} —É–∂–µ –µ—Å—Ç—å –≤ –¥—Ä—É–≥–∏—Ö –ø–∞–∫–∞—Ö. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É</strong>",
                reply_markup=kb.adm_back, parse_mode='HTML'
            )
            return

        try:
            pack_to_edit.usernames = ",".join(usernames)

            session.add(pack_to_edit)

            await message.answer(
                f"<strong>‚úÖ –ü–∞–∫ ‚Ññ{pack_to_edit.id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω</strong>",
                reply_markup=kb.adm_start, parse_mode='HTML'
            )
            await state.clear()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞–∫–∞: {e}")
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞",
                reply_markup=kb.adm_back
            )

        await session.commit()


@rt.callback_query(F.data == "add_spot")
async def start_add_spot(callback: CallbackQuery, state: FSMContext):
    await state.set_state(SpotStates.waiting_for_usernames)
    await callback.answer('üì≤ ADD')
    await callback.message.edit_text(
        "<strong>–í–≤–µ–¥–∏—Ç–µ 5 username-–æ–≤ —Å–ø–æ—Ç–æ–≤, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:</strong>",
        reply_markup=kb.adm_back, parse_mode='HTML'
    )

@rt.message(SpotStates.waiting_for_usernames)
async def process_usernames_spot(message: Message, state: FSMContext):
    usernames = message.text.strip().split("\n")

    if len(usernames) != 5:
        error_buttons = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='adm_back')]
        ])
        await message.answer(
            f"<strong>‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ ‚Äî {len(usernames)}</strong>",
            reply_markup=error_buttons, parse_mode='HTML'
        )
        return

    invalid_usernames = [username for username in usernames if not valid_username_pattern.match(username.strip())]

    if invalid_usernames:
        await message.answer(
            f"<strong>‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ username-—ã: {', '.join(invalid_usernames)}</strong>\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–∞–∂–¥—ã–π username —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤, —Ü–∏—Ñ—Ä, —Ç–æ—á–µ–∫ –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–π",
            reply_markup=kb.adm_back, parse_mode='HTML'
        )
        return

    duplicate_usernames = [username for username in usernames if usernames.count(username) > 1]
    if duplicate_usernames:
        await message.answer(
            f"<strong>‚ö†Ô∏è –í –ø–∞–∫–µ –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è —é–∑–µ—Ä–Ω–µ–π–º—ã: {', '.join(set(duplicate_usernames))}</strong>\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–¥–∞–ª–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —é–∑–µ—Ä–Ω–µ–π–º—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=kb.adm_back, parse_mode='HTML'
        )
        return

    async with async_session() as session:
        result = await session.execute(select(SpotPack.usernames))
        existing_usernames = result.scalars().all()

    existing_usernames = [username.strip() for usernames in existing_usernames for username in usernames.split(",")]

    duplicate_usernames_in_db = [username for username in usernames if username.strip() in existing_usernames]

    if duplicate_usernames_in_db:
        await message.answer(
            f"<strong>‚ö†Ô∏è –°–ø–æ—Ç —Å —é–∑–µ—Ä–Ω–µ–π–º–æ–º(–∞–º–∏) {', '.join(duplicate_usernames_in_db)} —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É</strong>",
            reply_markup=kb.adm_back, parse_mode='HTML'
        )
        return

    formatted_usernames = [
        f"**{i + 1}.** {username.strip().replace('_', '\\_')} ([—Å—Å—ã–ª–∫–∞](https://www.instagram.com/{username.strip()}/))"
        for i, username in enumerate(usernames)
    ]

    formatted_message = "\n".join(formatted_usernames)
    await state.update_data(usernames=usernames)

    await state.set_state(SpotStates.confirm_submission)
    await message.answer(
        f"**–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ!**\n\n{formatted_message}",
        parse_mode="Markdown",
        reply_markup=kb.confirmation_buttons_spot, disable_web_page_preview=True
    )

@rt.callback_query(F.data == "confirm_spot")
async def confirm_submission_spot(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    usernames = data.get("usernames", [])

    async with async_session() as session:
        pack = SpotPack(usernames=",".join(usernames))
        session.add(pack)
        await session.commit()
    await callback.answer('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å')
    await callback.message.edit_text(
        "<strong>‚úÖ –ü–∞–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–∞—Å—Å—ã–ª–∫—É</strong>",
        reply_markup=kb.adm_start, parse_mode='HTML'
    )
    await state.clear()

@rt.callback_query(F.data == "edit_spot")
async def edit_submission_spot(callback: CallbackQuery, state: FSMContext):
    await state.set_state(SpotStates.waiting_for_usernames)
    await callback.answer('üîß –ò–∑–º–µ–Ω–∏—Ç—å')
    await callback.message.edit_text(
        "<strong>–í–≤–µ–¥–∏—Ç–µ 5 username-–æ–≤ –°–ø–æ—Ç–æ–≤, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:</strong>",
        reply_markup=kb.adm_back, parse_mode='HTML'
    )

@rt.callback_query(F.data == "decline_spot")
async def decline_submission_spot(callback: CallbackQuery, state: FSMContext):
    await callback.answer('üóë –û—Ç–∫–ª–æ–Ω–∏—Ç—å')
    await callback.message.edit_text(
        "<strong>üóë –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.</strong>",
        reply_markup=kb.adm_start, parse_mode='HTML'
    )
    await state.clear()



@rt.callback_query(F.data == "database_spot")
async def show_database_spot(callback: CallbackQuery, state: FSMContext):
    async with async_session() as session:
        result = await session.execute(select(SpotPack).order_by(SpotPack.id))
        packs = result.scalars().all()
    await callback.answer('üìÅ DATABASE')
    if not packs:
        await callback.message.edit_text(
            "<strong>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞</strong>",
            reply_markup=kb.adm_back,
            parse_mode='HTML'
        )
        return

    await state.update_data(current_page=1)
    await send_pack_page_spot(callback.message, packs, 1)

async def send_pack_page_spot(message: Message, packs: list, page: int):
    pack = packs[page - 1]
    usernames = pack.usernames.split(",")

    formatted_usernames = [
        f"**{i + 1}.** {username.strip().replace('_', '\\_')} ([—Å—Å—ã–ª–∫–∞](https://www.instagram.com/{username.strip()}/))"
        for i, username in enumerate(usernames)
    ]

    formatted_message = "\n".join(formatted_usernames)
    total_pages = len(packs)

    try:
        await message.edit_text(
            f"{formatted_message}",
            parse_mode="Markdown",
            reply_markup=kb.database_navigation_spot(page, total_pages), disable_web_page_preview=True
        )
    except Exception:
        await message.answer(
            f"{formatted_message}",
            parse_mode="Markdown",
            reply_markup=kb.database_navigation_spot(page, total_pages), disable_web_page_preview=True
        )

@rt.callback_query(F.data.startswith("pagespot_"))
async def change_page_spot(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_page = data.get("current_page", 1)

    direction = callback.data.split("_")[1]
    async with async_session() as session:
        result = await session.execute(select(SpotPack).order_by(SpotPack.id))
        packs = result.scalars().all()

    if direction == "next" and current_page < len(packs):
        current_page += 1
        await callback.answer('‚ùØ')
    elif direction == "prev" and current_page > 1:
        await callback.answer('‚ùÆ')
        current_page -= 1
    else:
        await callback.answer('–ù–µ –≤—ã—Ö–æ–¥–∏ –∑–∞ —Ä–∞–º–∫–∏')
        return

    await state.update_data(current_page=current_page)
    await send_pack_page_spot(callback.message, packs, current_page)

@rt.callback_query(F.data == "go_to_page_spot")
async def request_page_number_spot(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "<strong>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–π—Ç–∏:</strong>",
        reply_markup=kb.adm_back,
        parse_mode='HTML'
    )
    await state.set_state(SpotStates.enter_page_number)

@rt.message(SpotStates.enter_page_number)
async def go_to_page_spot(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if not is_admin(user_id):
        return

    async with async_session() as session:
        if message.text.isdigit():
            page_number = int(message.text)
            result = await session.execute(select(SpotPack).order_by(SpotPack.id))
            packs = result.scalars().all()
            total_pages = len(packs)

            if 1 <= page_number <= total_pages:
                await state.update_data(current_page=page_number)
                await send_pack_page_spot(message, packs, page_number)
            else:
                await message.answer(f"<strong>‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {total_pages}</strong>",
                                     reply_markup=kb.adm_back,
                                     parse_mode="HTML")
        else:
            result = await session.execute(select(SpotPack).order_by(SpotPack.id))
            packs = result.scalars().all()

            pack = next((p for p in packs if message.text.lower() in p.usernames.lower()), None)

            if pack:
                page_number = packs.index(pack) + 1  
                await state.update_data(current_page=page_number)
                await send_pack_page_spot(message, packs, page_number)
            else:
                await message.answer("‚ö†Ô∏è –ü–∞–∫ —Å —Ç–∞–∫–∏–º —é–∑–µ—Ä–Ω–µ–π–º–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                                     reply_markup=kb.adm_back,
                                     parse_mode="HTML")


@rt.callback_query(F.data == "delete_pack_spot")
async def delete_pack_spot(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_page = data.get("current_page", 1)
    await callback.answer('üóë –£–¥–∞–ª–∏—Ç—å')
    async with async_session() as session:
        result = await session.execute(select(SpotPack).order_by(SpotPack.id))
        packs = result.scalars().all()

        if not packs:
            await callback.message.edit_text(
                "<strong>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞</strong>",
                reply_markup=kb.adm_back, parse_mode='HTML'
            )
            return

        pack_to_delete = packs[current_page - 1]
        pack_id = pack_to_delete.id

        users = await session.execute(select(User))
        users = users.scalars().all()
        for user in users:
            if pack_id in user.received_packs_spot:
                user.received_packs_spot.remove(pack_id)

        await session.delete(pack_to_delete)
        await session.commit()

    await callback.message.edit_text(
        f"<strong>üóë –ü–∞–∫ ‚Ññ{pack_to_delete.id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω</strong>",
        reply_markup=kb.adm_back, parse_mode='HTML'
    )

@rt.callback_query(F.data == "edit_pack_spot")
async def edit_pack_spot(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_page = data.get("current_page", 1)
    async with async_session() as session:
        result = await session.execute(select(SpotPack).order_by(SpotPack.id))
        packs = result.scalars().all()

        if current_page > len(packs):
            await callback.message.edit_text(
                "<strong>–û—à–∏–±–∫–∞: –ü–∞–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞</strong>",
                reply_markup=kb.adm_back, parse_mode='HTML'
            )
            return

        pack_to_edit = packs[current_page - 1]

        await state.update_data(pack_to_edit_id=pack_to_edit.id)

    await state.set_state(SpotStates.editing_page)
    await callback.answer('üîß –ò–∑–º–µ–Ω–∏—Ç—å')
    await callback.message.edit_text(
        "<strong>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ username-–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–∞–∫–∞ (5 —Å—Ç—Ä–æ–∫):</strong>",
        reply_markup=kb.adm_back, parse_mode='HTML'
    )

@rt.message(SpotStates.editing_page)
async def process_edit_pack_spot(message: Message, state: FSMContext):
    usernames = message.text.strip().splitlines()

    if len(usernames) != 5:
        await message.answer(
            f"<strong>‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ ‚Äî {len(usernames)}. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ–≤–Ω–æ 5. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:</strong>",
            reply_markup=kb.adm_back, parse_mode='HTML'
        )
        return

    invalid_usernames = [username for username in usernames if not valid_username_pattern.match(username.strip())]
    if invalid_usernames:
        await message.answer(
            f"<strong>‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ username-—ã: {', '.join(invalid_usernames)}</strong>\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–∞–∂–¥—ã–π username —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤, —Ü–∏—Ñ—Ä, —Ç–æ—á–µ–∫ –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–π",
            reply_markup=kb.adm_back, parse_mode='HTML'
        )
        return

    duplicate_usernames = [username for username in usernames if usernames.count(username) > 1]
    if duplicate_usernames:
        await message.answer(
            f"<strong>‚ö†Ô∏è –í –ø–∞–∫–µ –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è —é–∑–µ—Ä–Ω–µ–π–º—ã: {', '.join(set(duplicate_usernames))}</strong>\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–¥–∞–ª–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —é–∑–µ—Ä–Ω–µ–π–º—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=kb.adm_back, parse_mode='HTML'
        )
        return

    data = await state.get_data()
    current_page = data.get("current_page", 1)

    async with async_session() as session:
        result = await session.execute(select(SpotPack).order_by(SpotPack.id))
        packs = result.scalars().all()

        if current_page > len(packs):
            await message.answer(
                "<strong>–û—à–∏–±–∫–∞: –ü–∞–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞</strong>",
                reply_markup=kb.adm_back, parse_mode='HTML'
            )
            return

        pack_to_edit = packs[current_page - 1]

        result = await session.execute(select(SpotPack.usernames))
        existing_usernames = result.scalars().all()

    existing_usernames = [username.strip() for usernames in existing_usernames for username in usernames.split(",")]

    current_pack_usernames = set(pack_to_edit.usernames.split(","))
    filtered_usernames = [username for username in usernames if username.strip() not in current_pack_usernames]

    duplicate_usernames_in_db = [username for username in filtered_usernames if username.strip() in existing_usernames]

    if duplicate_usernames_in_db:
        await message.answer(
            f"<strong>‚ö†Ô∏è –°–ø–æ—Ç —Å —é–∑–µ—Ä–Ω–µ–π–º–æ–º(–∞–º–∏) {', '.join(duplicate_usernames_in_db)} —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É</strong>",
            reply_markup=kb.adm_back, parse_mode='HTML'
        )
        return

    try:
        pack_to_edit.usernames = ",".join(usernames)

        async with async_session() as session:
            await session.merge(pack_to_edit)  

            await session.commit()

        if pack_to_edit.usernames != ",".join(usernames):
            logger.error("–û—à–∏–±–∫–∞: –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=kb.adm_back
            )
            return

        await message.answer(
            f"<strong>‚úÖ –ü–∞–∫ ‚Ññ{pack_to_edit.id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω</strong>",
            reply_markup=kb.adm_start, parse_mode='HTML'
        )
        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞–∫–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", reply_markup=kb.adm_back)



